
FlashEEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080022c0  080022c0  000122c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002380  08002380  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002380  08002380  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002380  08002380  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002380  08002380  00012380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002384  08002384  00012384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000078  08002400  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08002400  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004a26  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000136b  00000000  00000000  00024ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004b8  00000000  00000000  00025e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000410  00000000  00000000  000262f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016aaa  00000000  00000000  00026700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000576e  00000000  00000000  0003d1aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fe65  00000000  00000000  00042918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c277d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ac0  00000000  00000000  000c27d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080022a8 	.word	0x080022a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080022a8 	.word	0x080022a8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b590      	push	{r4, r7, lr}
 800015e:	b08b      	sub	sp, #44	; 0x2c
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	extern void initialise_monitor_handles(void);
	initialise_monitor_handles();
 8000162:	f001 fb31 	bl	80017c8 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000166:	f000 f9a7 	bl	80004b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016a:	f000 f861 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016e:	f000 f8a5 	bl	80002bc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  //char * DATA_32 = "Hello World!";
  long unsigned int * DATA_32 = "Hello World!";
 8000172:	4b2c      	ldr	r3, [pc, #176]	; (8000224 <main+0xc8>)
 8000174:	61fb      	str	r3, [r7, #28]

  //char * DATA_64 = "Hello World!";
  uint32_t pageErr;

  uint32_t strat_page = 0x08007C00;
 8000176:	4b2c      	ldr	r3, [pc, #176]	; (8000228 <main+0xcc>)
 8000178:	627b      	str	r3, [r7, #36]	; 0x24

  int numberofword = ((strlen(DATA_32)/4) + ((strlen(DATA_32)%4) != 0));
 800017a:	69f8      	ldr	r0, [r7, #28]
 800017c:	f7ff ffe6 	bl	800014c <strlen>
 8000180:	4603      	mov	r3, r0
 8000182:	089c      	lsrs	r4, r3, #2
 8000184:	69f8      	ldr	r0, [r7, #28]
 8000186:	f7ff ffe1 	bl	800014c <strlen>
 800018a:	4603      	mov	r3, r0
 800018c:	f003 0303 	and.w	r3, r3, #3
 8000190:	2b00      	cmp	r3, #0
 8000192:	bf14      	ite	ne
 8000194:	2301      	movne	r3, #1
 8000196:	2300      	moveq	r3, #0
 8000198:	b2db      	uxtb	r3, r3
 800019a:	4423      	add	r3, r4
 800019c:	61bb      	str	r3, [r7, #24]

  FLASH_EraseInitTypeDef EraseInitStruct;

  HAL_FLASH_Unlock();
 800019e:	f000 fb65 	bl	800086c <HAL_FLASH_Unlock>

  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80001a2:	2300      	movs	r3, #0
 80001a4:	607b      	str	r3, [r7, #4]
  EraseInitStruct.PageAddress = 0x08007C00;
 80001a6:	4b20      	ldr	r3, [pc, #128]	; (8000228 <main+0xcc>)
 80001a8:	60fb      	str	r3, [r7, #12]
  EraseInitStruct.NbPages = (numberofword/FLASH_PAGE_SIZE) + 1;
 80001aa:	69bb      	ldr	r3, [r7, #24]
 80001ac:	0a9b      	lsrs	r3, r3, #10
 80001ae:	3301      	adds	r3, #1
 80001b0:	613b      	str	r3, [r7, #16]

  if( HAL_FLASHEx_Erase(&EraseInitStruct, &pageErr) != HAL_OK)
 80001b2:	f107 0214 	add.w	r2, r7, #20
 80001b6:	1d3b      	adds	r3, r7, #4
 80001b8:	4611      	mov	r1, r2
 80001ba:	4618      	mov	r0, r3
 80001bc:	f000 fc48 	bl	8000a50 <HAL_FLASHEx_Erase>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d003      	beq.n	80001ce <main+0x72>
  {
	  return HAL_FLASH_GetError();
 80001c6:	f000 fb87 	bl	80008d8 <HAL_FLASH_GetError>
 80001ca:	4603      	mov	r3, r0
 80001cc:	e025      	b.n	800021a <main+0xbe>
  }

  int i = 0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	623b      	str	r3, [r7, #32]

  while ( i < numberofword)
 80001d2:	e014      	b.n	80001fe <main+0xa2>
  {
	  if( HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, strat_page , DATA_32[i]) )
 80001d4:	6a3b      	ldr	r3, [r7, #32]
 80001d6:	009b      	lsls	r3, r3, #2
 80001d8:	69fa      	ldr	r2, [r7, #28]
 80001da:	4413      	add	r3, r2
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	461a      	mov	r2, r3
 80001e0:	f04f 0300 	mov.w	r3, #0
 80001e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80001e6:	2002      	movs	r0, #2
 80001e8:	f000 fad0 	bl	800078c <HAL_FLASH_Program>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d005      	beq.n	80001fe <main+0xa2>
	  {
		  strat_page = strat_page + 4;
 80001f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001f4:	3304      	adds	r3, #4
 80001f6:	627b      	str	r3, [r7, #36]	; 0x24
		  i++;
 80001f8:	6a3b      	ldr	r3, [r7, #32]
 80001fa:	3301      	adds	r3, #1
 80001fc:	623b      	str	r3, [r7, #32]
  while ( i < numberofword)
 80001fe:	6a3a      	ldr	r2, [r7, #32]
 8000200:	69bb      	ldr	r3, [r7, #24]
 8000202:	429a      	cmp	r2, r3
 8000204:	dbe6      	blt.n	80001d4 <main+0x78>
	  }
  }

  HAL_FLASH_Lock();
 8000206:	f000 fb57 	bl	80008b8 <HAL_FLASH_Lock>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("Hello, World!\n");
 800020a:	4808      	ldr	r0, [pc, #32]	; (800022c <main+0xd0>)
 800020c:	f001 fd4a 	bl	8001ca4 <puts>
	  HAL_Delay(1000);
 8000210:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000214:	f000 f9b2 	bl	800057c <HAL_Delay>
	  printf("Hello, World!\n");
 8000218:	e7f7      	b.n	800020a <main+0xae>
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800021a:	4618      	mov	r0, r3
 800021c:	372c      	adds	r7, #44	; 0x2c
 800021e:	46bd      	mov	sp, r7
 8000220:	bd90      	pop	{r4, r7, pc}
 8000222:	bf00      	nop
 8000224:	080022c0 	.word	0x080022c0
 8000228:	08007c00 	.word	0x08007c00
 800022c:	080022d0 	.word	0x080022d0

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b090      	sub	sp, #64	; 0x40
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0318 	add.w	r3, r7, #24
 800023a:	2228      	movs	r2, #40	; 0x28
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f001 fc5f 	bl	8001b02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
 8000250:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000252:	2301      	movs	r3, #1
 8000254:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000256:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800025a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000260:	2301      	movs	r3, #1
 8000262:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000264:	2302      	movs	r3, #2
 8000266:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000268:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800026e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000272:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000274:	f107 0318 	add.w	r3, r7, #24
 8000278:	4618      	mov	r0, r3
 800027a:	f000 fc91 	bl	8000ba0 <HAL_RCC_OscConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000284:	f000 f854 	bl	8000330 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000288:	230f      	movs	r3, #15
 800028a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028c:	2302      	movs	r3, #2
 800028e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000298:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	2102      	movs	r1, #2
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 fefc 	bl	80010a0 <HAL_RCC_ClockConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ae:	f000 f83f 	bl	8000330 <Error_Handler>
  }
}
 80002b2:	bf00      	nop
 80002b4:	3740      	adds	r7, #64	; 0x40
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
	...

080002bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c2:	4b1a      	ldr	r3, [pc, #104]	; (800032c <MX_GPIO_Init+0x70>)
 80002c4:	699b      	ldr	r3, [r3, #24]
 80002c6:	4a19      	ldr	r2, [pc, #100]	; (800032c <MX_GPIO_Init+0x70>)
 80002c8:	f043 0310 	orr.w	r3, r3, #16
 80002cc:	6193      	str	r3, [r2, #24]
 80002ce:	4b17      	ldr	r3, [pc, #92]	; (800032c <MX_GPIO_Init+0x70>)
 80002d0:	699b      	ldr	r3, [r3, #24]
 80002d2:	f003 0310 	and.w	r3, r3, #16
 80002d6:	60fb      	str	r3, [r7, #12]
 80002d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002da:	4b14      	ldr	r3, [pc, #80]	; (800032c <MX_GPIO_Init+0x70>)
 80002dc:	699b      	ldr	r3, [r3, #24]
 80002de:	4a13      	ldr	r2, [pc, #76]	; (800032c <MX_GPIO_Init+0x70>)
 80002e0:	f043 0320 	orr.w	r3, r3, #32
 80002e4:	6193      	str	r3, [r2, #24]
 80002e6:	4b11      	ldr	r3, [pc, #68]	; (800032c <MX_GPIO_Init+0x70>)
 80002e8:	699b      	ldr	r3, [r3, #24]
 80002ea:	f003 0320 	and.w	r3, r3, #32
 80002ee:	60bb      	str	r3, [r7, #8]
 80002f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f2:	4b0e      	ldr	r3, [pc, #56]	; (800032c <MX_GPIO_Init+0x70>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	4a0d      	ldr	r2, [pc, #52]	; (800032c <MX_GPIO_Init+0x70>)
 80002f8:	f043 0304 	orr.w	r3, r3, #4
 80002fc:	6193      	str	r3, [r2, #24]
 80002fe:	4b0b      	ldr	r3, [pc, #44]	; (800032c <MX_GPIO_Init+0x70>)
 8000300:	699b      	ldr	r3, [r3, #24]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	607b      	str	r3, [r7, #4]
 8000308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <MX_GPIO_Init+0x70>)
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	4a07      	ldr	r2, [pc, #28]	; (800032c <MX_GPIO_Init+0x70>)
 8000310:	f043 0308 	orr.w	r3, r3, #8
 8000314:	6193      	str	r3, [r2, #24]
 8000316:	4b05      	ldr	r3, [pc, #20]	; (800032c <MX_GPIO_Init+0x70>)
 8000318:	699b      	ldr	r3, [r3, #24]
 800031a:	f003 0308 	and.w	r3, r3, #8
 800031e:	603b      	str	r3, [r7, #0]
 8000320:	683b      	ldr	r3, [r7, #0]

}
 8000322:	bf00      	nop
 8000324:	3714      	adds	r7, #20
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	40021000 	.word	0x40021000

08000330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr

0800033c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000342:	4b15      	ldr	r3, [pc, #84]	; (8000398 <HAL_MspInit+0x5c>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4a14      	ldr	r2, [pc, #80]	; (8000398 <HAL_MspInit+0x5c>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	6193      	str	r3, [r2, #24]
 800034e:	4b12      	ldr	r3, [pc, #72]	; (8000398 <HAL_MspInit+0x5c>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	60bb      	str	r3, [r7, #8]
 8000358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800035a:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <HAL_MspInit+0x5c>)
 800035c:	69db      	ldr	r3, [r3, #28]
 800035e:	4a0e      	ldr	r2, [pc, #56]	; (8000398 <HAL_MspInit+0x5c>)
 8000360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000364:	61d3      	str	r3, [r2, #28]
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <HAL_MspInit+0x5c>)
 8000368:	69db      	ldr	r3, [r3, #28]
 800036a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000372:	4b0a      	ldr	r3, [pc, #40]	; (800039c <HAL_MspInit+0x60>)
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000386:	60fb      	str	r3, [r7, #12]
 8000388:	4a04      	ldr	r2, [pc, #16]	; (800039c <HAL_MspInit+0x60>)
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800038e:	bf00      	nop
 8000390:	3714      	adds	r7, #20
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr
 8000398:	40021000 	.word	0x40021000
 800039c:	40010000 	.word	0x40010000

080003a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr

080003ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003b0:	e7fe      	b.n	80003b0 <HardFault_Handler+0x4>

080003b2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003b6:	e7fe      	b.n	80003b6 <MemManage_Handler+0x4>

080003b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003bc:	e7fe      	b.n	80003bc <BusFault_Handler+0x4>

080003be <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003be:	b480      	push	{r7}
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003c2:	e7fe      	b.n	80003c2 <UsageFault_Handler+0x4>

080003c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr

080003d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr

080003dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr

080003e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ec:	f000 f8aa 	bl	8000544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003fc:	4a14      	ldr	r2, [pc, #80]	; (8000450 <_sbrk+0x5c>)
 80003fe:	4b15      	ldr	r3, [pc, #84]	; (8000454 <_sbrk+0x60>)
 8000400:	1ad3      	subs	r3, r2, r3
 8000402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000408:	4b13      	ldr	r3, [pc, #76]	; (8000458 <_sbrk+0x64>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d102      	bne.n	8000416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000410:	4b11      	ldr	r3, [pc, #68]	; (8000458 <_sbrk+0x64>)
 8000412:	4a12      	ldr	r2, [pc, #72]	; (800045c <_sbrk+0x68>)
 8000414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000416:	4b10      	ldr	r3, [pc, #64]	; (8000458 <_sbrk+0x64>)
 8000418:	681a      	ldr	r2, [r3, #0]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4413      	add	r3, r2
 800041e:	693a      	ldr	r2, [r7, #16]
 8000420:	429a      	cmp	r2, r3
 8000422:	d207      	bcs.n	8000434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000424:	f001 fa4a 	bl	80018bc <__errno>
 8000428:	4603      	mov	r3, r0
 800042a:	220c      	movs	r2, #12
 800042c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800042e:	f04f 33ff 	mov.w	r3, #4294967295
 8000432:	e009      	b.n	8000448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000434:	4b08      	ldr	r3, [pc, #32]	; (8000458 <_sbrk+0x64>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800043a:	4b07      	ldr	r3, [pc, #28]	; (8000458 <_sbrk+0x64>)
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4413      	add	r3, r2
 8000442:	4a05      	ldr	r2, [pc, #20]	; (8000458 <_sbrk+0x64>)
 8000444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000446:	68fb      	ldr	r3, [r7, #12]
}
 8000448:	4618      	mov	r0, r3
 800044a:	3718      	adds	r7, #24
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20005000 	.word	0x20005000
 8000454:	00000400 	.word	0x00000400
 8000458:	20000094 	.word	0x20000094
 800045c:	20000180 	.word	0x20000180

08000460 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr

0800046c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800046c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800046e:	e003      	b.n	8000478 <LoopCopyDataInit>

08000470 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000470:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000472:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000474:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000476:	3104      	adds	r1, #4

08000478 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000478:	480a      	ldr	r0, [pc, #40]	; (80004a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800047a:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800047c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800047e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000480:	d3f6      	bcc.n	8000470 <CopyDataInit>
  ldr r2, =_sbss
 8000482:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000484:	e002      	b.n	800048c <LoopFillZerobss>

08000486 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000488:	f842 3b04 	str.w	r3, [r2], #4

0800048c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800048c:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800048e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000490:	d3f9      	bcc.n	8000486 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000492:	f7ff ffe5 	bl	8000460 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000496:	f001 fb0d 	bl	8001ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800049a:	f7ff fe5f 	bl	800015c <main>
  bx lr
 800049e:	4770      	bx	lr
  ldr r3, =_sidata
 80004a0:	08002388 	.word	0x08002388
  ldr r0, =_sdata
 80004a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80004a8:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80004ac:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80004b0:	20000180 	.word	0x20000180

080004b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b4:	e7fe      	b.n	80004b4 <ADC1_2_IRQHandler>
	...

080004b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004bc:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <HAL_Init+0x28>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a07      	ldr	r2, [pc, #28]	; (80004e0 <HAL_Init+0x28>)
 80004c2:	f043 0310 	orr.w	r3, r3, #16
 80004c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004c8:	2003      	movs	r0, #3
 80004ca:	f000 f92b 	bl	8000724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004ce:	2000      	movs	r0, #0
 80004d0:	f000 f808 	bl	80004e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004d4:	f7ff ff32 	bl	800033c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004d8:	2300      	movs	r3, #0
}
 80004da:	4618      	mov	r0, r3
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40022000 	.word	0x40022000

080004e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ec:	4b12      	ldr	r3, [pc, #72]	; (8000538 <HAL_InitTick+0x54>)
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	4b12      	ldr	r3, [pc, #72]	; (800053c <HAL_InitTick+0x58>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	4619      	mov	r1, r3
 80004f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80004fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000502:	4618      	mov	r0, r3
 8000504:	f000 f935 	bl	8000772 <HAL_SYSTICK_Config>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800050e:	2301      	movs	r3, #1
 8000510:	e00e      	b.n	8000530 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2b0f      	cmp	r3, #15
 8000516:	d80a      	bhi.n	800052e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000518:	2200      	movs	r2, #0
 800051a:	6879      	ldr	r1, [r7, #4]
 800051c:	f04f 30ff 	mov.w	r0, #4294967295
 8000520:	f000 f90b 	bl	800073a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000524:	4a06      	ldr	r2, [pc, #24]	; (8000540 <HAL_InitTick+0x5c>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800052a:	2300      	movs	r3, #0
 800052c:	e000      	b.n	8000530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800052e:	2301      	movs	r3, #1
}
 8000530:	4618      	mov	r0, r3
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20000000 	.word	0x20000000
 800053c:	20000008 	.word	0x20000008
 8000540:	20000004 	.word	0x20000004

08000544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <HAL_IncTick+0x1c>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	461a      	mov	r2, r3
 800054e:	4b05      	ldr	r3, [pc, #20]	; (8000564 <HAL_IncTick+0x20>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4413      	add	r3, r2
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <HAL_IncTick+0x20>)
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	20000008 	.word	0x20000008
 8000564:	2000014c 	.word	0x2000014c

08000568 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  return uwTick;
 800056c:	4b02      	ldr	r3, [pc, #8]	; (8000578 <HAL_GetTick+0x10>)
 800056e:	681b      	ldr	r3, [r3, #0]
}
 8000570:	4618      	mov	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	2000014c 	.word	0x2000014c

0800057c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000584:	f7ff fff0 	bl	8000568 <HAL_GetTick>
 8000588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000594:	d005      	beq.n	80005a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000596:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <HAL_Delay+0x44>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	461a      	mov	r2, r3
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4413      	add	r3, r2
 80005a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005a2:	bf00      	nop
 80005a4:	f7ff ffe0 	bl	8000568 <HAL_GetTick>
 80005a8:	4602      	mov	r2, r0
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	68fa      	ldr	r2, [r7, #12]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d8f7      	bhi.n	80005a4 <HAL_Delay+0x28>
  {
  }
}
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000008 	.word	0x20000008

080005c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f003 0307 	and.w	r3, r3, #7
 80005d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <__NVIC_SetPriorityGrouping+0x44>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e0:	4013      	ands	r3, r2
 80005e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005f6:	4a04      	ldr	r2, [pc, #16]	; (8000608 <__NVIC_SetPriorityGrouping+0x44>)
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	60d3      	str	r3, [r2, #12]
}
 80005fc:	bf00      	nop
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <__NVIC_GetPriorityGrouping+0x18>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	0a1b      	lsrs	r3, r3, #8
 8000616:	f003 0307 	and.w	r3, r3, #7
}
 800061a:	4618      	mov	r0, r3
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	6039      	str	r1, [r7, #0]
 8000632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000638:	2b00      	cmp	r3, #0
 800063a:	db0a      	blt.n	8000652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	b2da      	uxtb	r2, r3
 8000640:	490c      	ldr	r1, [pc, #48]	; (8000674 <__NVIC_SetPriority+0x4c>)
 8000642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000646:	0112      	lsls	r2, r2, #4
 8000648:	b2d2      	uxtb	r2, r2
 800064a:	440b      	add	r3, r1
 800064c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000650:	e00a      	b.n	8000668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	b2da      	uxtb	r2, r3
 8000656:	4908      	ldr	r1, [pc, #32]	; (8000678 <__NVIC_SetPriority+0x50>)
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	f003 030f 	and.w	r3, r3, #15
 800065e:	3b04      	subs	r3, #4
 8000660:	0112      	lsls	r2, r2, #4
 8000662:	b2d2      	uxtb	r2, r2
 8000664:	440b      	add	r3, r1
 8000666:	761a      	strb	r2, [r3, #24]
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000e100 	.word	0xe000e100
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800067c:	b480      	push	{r7}
 800067e:	b089      	sub	sp, #36	; 0x24
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f003 0307 	and.w	r3, r3, #7
 800068e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000690:	69fb      	ldr	r3, [r7, #28]
 8000692:	f1c3 0307 	rsb	r3, r3, #7
 8000696:	2b04      	cmp	r3, #4
 8000698:	bf28      	it	cs
 800069a:	2304      	movcs	r3, #4
 800069c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	3304      	adds	r3, #4
 80006a2:	2b06      	cmp	r3, #6
 80006a4:	d902      	bls.n	80006ac <NVIC_EncodePriority+0x30>
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	3b03      	subs	r3, #3
 80006aa:	e000      	b.n	80006ae <NVIC_EncodePriority+0x32>
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b0:	f04f 32ff 	mov.w	r2, #4294967295
 80006b4:	69bb      	ldr	r3, [r7, #24]
 80006b6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ba:	43da      	mvns	r2, r3
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	401a      	ands	r2, r3
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c4:	f04f 31ff 	mov.w	r1, #4294967295
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	fa01 f303 	lsl.w	r3, r1, r3
 80006ce:	43d9      	mvns	r1, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	4313      	orrs	r3, r2
         );
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3724      	adds	r7, #36	; 0x24
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr

080006e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	3b01      	subs	r3, #1
 80006ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006f0:	d301      	bcc.n	80006f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006f2:	2301      	movs	r3, #1
 80006f4:	e00f      	b.n	8000716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f6:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <SysTick_Config+0x40>)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006fe:	210f      	movs	r1, #15
 8000700:	f04f 30ff 	mov.w	r0, #4294967295
 8000704:	f7ff ff90 	bl	8000628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <SysTick_Config+0x40>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800070e:	4b04      	ldr	r3, [pc, #16]	; (8000720 <SysTick_Config+0x40>)
 8000710:	2207      	movs	r2, #7
 8000712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	e000e010 	.word	0xe000e010

08000724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff ff49 	bl	80005c4 <__NVIC_SetPriorityGrouping>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800073a:	b580      	push	{r7, lr}
 800073c:	b086      	sub	sp, #24
 800073e:	af00      	add	r7, sp, #0
 8000740:	4603      	mov	r3, r0
 8000742:	60b9      	str	r1, [r7, #8]
 8000744:	607a      	str	r2, [r7, #4]
 8000746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800074c:	f7ff ff5e 	bl	800060c <__NVIC_GetPriorityGrouping>
 8000750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	68b9      	ldr	r1, [r7, #8]
 8000756:	6978      	ldr	r0, [r7, #20]
 8000758:	f7ff ff90 	bl	800067c <NVIC_EncodePriority>
 800075c:	4602      	mov	r2, r0
 800075e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000762:	4611      	mov	r1, r2
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff5f 	bl	8000628 <__NVIC_SetPriority>
}
 800076a:	bf00      	nop
 800076c:	3718      	adds	r7, #24
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b082      	sub	sp, #8
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f7ff ffb0 	bl	80006e0 <SysTick_Config>
 8000780:	4603      	mov	r3, r0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800078c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800078e:	b087      	sub	sp, #28
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80007a6:	4b2f      	ldr	r3, [pc, #188]	; (8000864 <HAL_FLASH_Program+0xd8>)
 80007a8:	7e1b      	ldrb	r3, [r3, #24]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d101      	bne.n	80007b2 <HAL_FLASH_Program+0x26>
 80007ae:	2302      	movs	r3, #2
 80007b0:	e054      	b.n	800085c <HAL_FLASH_Program+0xd0>
 80007b2:	4b2c      	ldr	r3, [pc, #176]	; (8000864 <HAL_FLASH_Program+0xd8>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80007b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80007bc:	f000 f8b2 	bl	8000924 <FLASH_WaitForLastOperation>
 80007c0:	4603      	mov	r3, r0
 80007c2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80007c4:	7dfb      	ldrb	r3, [r7, #23]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d144      	bne.n	8000854 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d102      	bne.n	80007d6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80007d0:	2301      	movs	r3, #1
 80007d2:	757b      	strb	r3, [r7, #21]
 80007d4:	e007      	b.n	80007e6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d102      	bne.n	80007e2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80007dc:	2302      	movs	r3, #2
 80007de:	757b      	strb	r3, [r7, #21]
 80007e0:	e001      	b.n	80007e6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80007e2:	2304      	movs	r3, #4
 80007e4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80007e6:	2300      	movs	r3, #0
 80007e8:	75bb      	strb	r3, [r7, #22]
 80007ea:	e02d      	b.n	8000848 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80007ec:	7dbb      	ldrb	r3, [r7, #22]
 80007ee:	005a      	lsls	r2, r3, #1
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	eb02 0c03 	add.w	ip, r2, r3
 80007f6:	7dbb      	ldrb	r3, [r7, #22]
 80007f8:	0119      	lsls	r1, r3, #4
 80007fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80007fe:	f1c1 0620 	rsb	r6, r1, #32
 8000802:	f1a1 0020 	sub.w	r0, r1, #32
 8000806:	fa22 f401 	lsr.w	r4, r2, r1
 800080a:	fa03 f606 	lsl.w	r6, r3, r6
 800080e:	4334      	orrs	r4, r6
 8000810:	fa23 f000 	lsr.w	r0, r3, r0
 8000814:	4304      	orrs	r4, r0
 8000816:	fa23 f501 	lsr.w	r5, r3, r1
 800081a:	b2a3      	uxth	r3, r4
 800081c:	4619      	mov	r1, r3
 800081e:	4660      	mov	r0, ip
 8000820:	f000 f864 	bl	80008ec <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000824:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000828:	f000 f87c 	bl	8000924 <FLASH_WaitForLastOperation>
 800082c:	4603      	mov	r3, r0
 800082e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000830:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <HAL_FLASH_Program+0xdc>)
 8000832:	691b      	ldr	r3, [r3, #16]
 8000834:	4a0c      	ldr	r2, [pc, #48]	; (8000868 <HAL_FLASH_Program+0xdc>)
 8000836:	f023 0301 	bic.w	r3, r3, #1
 800083a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800083c:	7dfb      	ldrb	r3, [r7, #23]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d107      	bne.n	8000852 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000842:	7dbb      	ldrb	r3, [r7, #22]
 8000844:	3301      	adds	r3, #1
 8000846:	75bb      	strb	r3, [r7, #22]
 8000848:	7dba      	ldrb	r2, [r7, #22]
 800084a:	7d7b      	ldrb	r3, [r7, #21]
 800084c:	429a      	cmp	r2, r3
 800084e:	d3cd      	bcc.n	80007ec <HAL_FLASH_Program+0x60>
 8000850:	e000      	b.n	8000854 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000852:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <HAL_FLASH_Program+0xd8>)
 8000856:	2200      	movs	r2, #0
 8000858:	761a      	strb	r2, [r3, #24]

  return status;
 800085a:	7dfb      	ldrb	r3, [r7, #23]
}
 800085c:	4618      	mov	r0, r3
 800085e:	371c      	adds	r7, #28
 8000860:	46bd      	mov	sp, r7
 8000862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000864:	20000150 	.word	0x20000150
 8000868:	40022000 	.word	0x40022000

0800086c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000872:	2300      	movs	r3, #0
 8000874:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <HAL_FLASH_Unlock+0x40>)
 8000878:	691b      	ldr	r3, [r3, #16]
 800087a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087e:	2b00      	cmp	r3, #0
 8000880:	d00d      	beq.n	800089e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000882:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <HAL_FLASH_Unlock+0x40>)
 8000884:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <HAL_FLASH_Unlock+0x44>)
 8000886:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <HAL_FLASH_Unlock+0x40>)
 800088a:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <HAL_FLASH_Unlock+0x48>)
 800088c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800088e:	4b07      	ldr	r3, [pc, #28]	; (80008ac <HAL_FLASH_Unlock+0x40>)
 8000890:	691b      	ldr	r3, [r3, #16]
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800089e:	79fb      	ldrb	r3, [r7, #7]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40022000 	.word	0x40022000
 80008b0:	45670123 	.word	0x45670123
 80008b4:	cdef89ab 	.word	0xcdef89ab

080008b8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <HAL_FLASH_Lock+0x1c>)
 80008be:	691b      	ldr	r3, [r3, #16]
 80008c0:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <HAL_FLASH_Lock+0x1c>)
 80008c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40022000 	.word	0x40022000

080008d8 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80008dc:	4b02      	ldr	r3, [pc, #8]	; (80008e8 <HAL_FLASH_GetError+0x10>)
 80008de:	69db      	ldr	r3, [r3, #28]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	20000150 	.word	0x20000150

080008ec <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	460b      	mov	r3, r1
 80008f6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <FLASH_Program_HalfWord+0x30>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <FLASH_Program_HalfWord+0x34>)
 8000900:	691b      	ldr	r3, [r3, #16]
 8000902:	4a07      	ldr	r2, [pc, #28]	; (8000920 <FLASH_Program_HalfWord+0x34>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	887a      	ldrh	r2, [r7, #2]
 800090e:	801a      	strh	r2, [r3, #0]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	20000150 	.word	0x20000150
 8000920:	40022000 	.word	0x40022000

08000924 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800092c:	f7ff fe1c 	bl	8000568 <HAL_GetTick>
 8000930:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000932:	e010      	b.n	8000956 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800093a:	d00c      	beq.n	8000956 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d007      	beq.n	8000952 <FLASH_WaitForLastOperation+0x2e>
 8000942:	f7ff fe11 	bl	8000568 <HAL_GetTick>
 8000946:	4602      	mov	r2, r0
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	1ad3      	subs	r3, r2, r3
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	429a      	cmp	r2, r3
 8000950:	d201      	bcs.n	8000956 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000952:	2303      	movs	r3, #3
 8000954:	e025      	b.n	80009a2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <FLASH_WaitForLastOperation+0x88>)
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	2b00      	cmp	r3, #0
 8000960:	d1e8      	bne.n	8000934 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <FLASH_WaitForLastOperation+0x88>)
 8000964:	68db      	ldr	r3, [r3, #12]
 8000966:	f003 0320 	and.w	r3, r3, #32
 800096a:	2b00      	cmp	r3, #0
 800096c:	d002      	beq.n	8000974 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <FLASH_WaitForLastOperation+0x88>)
 8000970:	2220      	movs	r2, #32
 8000972:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000974:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <FLASH_WaitForLastOperation+0x88>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	f003 0310 	and.w	r3, r3, #16
 800097c:	2b00      	cmp	r3, #0
 800097e:	d10b      	bne.n	8000998 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <FLASH_WaitForLastOperation+0x88>)
 8000982:	69db      	ldr	r3, [r3, #28]
 8000984:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000988:	2b00      	cmp	r3, #0
 800098a:	d105      	bne.n	8000998 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <FLASH_WaitForLastOperation+0x88>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000994:	2b00      	cmp	r3, #0
 8000996:	d003      	beq.n	80009a0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000998:	f000 f80a 	bl	80009b0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800099c:	2301      	movs	r3, #1
 800099e:	e000      	b.n	80009a2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40022000 	.word	0x40022000

080009b0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80009ba:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <FLASH_SetErrorCode+0x98>)
 80009bc:	68db      	ldr	r3, [r3, #12]
 80009be:	f003 0310 	and.w	r3, r3, #16
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d009      	beq.n	80009da <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <FLASH_SetErrorCode+0x9c>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	f043 0302 	orr.w	r3, r3, #2
 80009ce:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <FLASH_SetErrorCode+0x9c>)
 80009d0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f043 0310 	orr.w	r3, r3, #16
 80009d8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <FLASH_SetErrorCode+0x98>)
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	f003 0304 	and.w	r3, r3, #4
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d009      	beq.n	80009fa <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <FLASH_SetErrorCode+0x9c>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <FLASH_SetErrorCode+0x9c>)
 80009f0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <FLASH_SetErrorCode+0x98>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d00b      	beq.n	8000a1e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <FLASH_SetErrorCode+0x9c>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	f043 0304 	orr.w	r3, r3, #4
 8000a0e:	4a0f      	ldr	r2, [pc, #60]	; (8000a4c <FLASH_SetErrorCode+0x9c>)
 8000a10:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <FLASH_SetErrorCode+0x98>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	4a0c      	ldr	r2, [pc, #48]	; (8000a48 <FLASH_SetErrorCode+0x98>)
 8000a18:	f023 0301 	bic.w	r3, r3, #1
 8000a1c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f240 1201 	movw	r2, #257	; 0x101
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d106      	bne.n	8000a36 <FLASH_SetErrorCode+0x86>
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <FLASH_SetErrorCode+0x98>)
 8000a2a:	69db      	ldr	r3, [r3, #28]
 8000a2c:	4a06      	ldr	r2, [pc, #24]	; (8000a48 <FLASH_SetErrorCode+0x98>)
 8000a2e:	f023 0301 	bic.w	r3, r3, #1
 8000a32:	61d3      	str	r3, [r2, #28]
}  
 8000a34:	e002      	b.n	8000a3c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000a36:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <FLASH_SetErrorCode+0x98>)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	60d3      	str	r3, [r2, #12]
}  
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40022000 	.word	0x40022000
 8000a4c:	20000150 	.word	0x20000150

08000a50 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000a62:	4b2f      	ldr	r3, [pc, #188]	; (8000b20 <HAL_FLASHEx_Erase+0xd0>)
 8000a64:	7e1b      	ldrb	r3, [r3, #24]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d101      	bne.n	8000a6e <HAL_FLASHEx_Erase+0x1e>
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	e053      	b.n	8000b16 <HAL_FLASHEx_Erase+0xc6>
 8000a6e:	4b2c      	ldr	r3, [pc, #176]	; (8000b20 <HAL_FLASHEx_Erase+0xd0>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d116      	bne.n	8000aaa <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000a7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000a80:	f7ff ff50 	bl	8000924 <FLASH_WaitForLastOperation>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d141      	bne.n	8000b0e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f000 f84c 	bl	8000b28 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000a90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000a94:	f7ff ff46 	bl	8000924 <FLASH_WaitForLastOperation>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000a9c:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <HAL_FLASHEx_Erase+0xd4>)
 8000a9e:	691b      	ldr	r3, [r3, #16]
 8000aa0:	4a20      	ldr	r2, [pc, #128]	; (8000b24 <HAL_FLASHEx_Erase+0xd4>)
 8000aa2:	f023 0304 	bic.w	r3, r3, #4
 8000aa6:	6113      	str	r3, [r2, #16]
 8000aa8:	e031      	b.n	8000b0e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000aaa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000aae:	f7ff ff39 	bl	8000924 <FLASH_WaitForLastOperation>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d12a      	bne.n	8000b0e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	f04f 32ff 	mov.w	r2, #4294967295
 8000abe:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	e019      	b.n	8000afc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000ac8:	68b8      	ldr	r0, [r7, #8]
 8000aca:	f000 f849 	bl	8000b60 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ace:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ad2:	f7ff ff27 	bl	8000924 <FLASH_WaitForLastOperation>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000ada:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <HAL_FLASHEx_Erase+0xd4>)
 8000adc:	691b      	ldr	r3, [r3, #16]
 8000ade:	4a11      	ldr	r2, [pc, #68]	; (8000b24 <HAL_FLASHEx_Erase+0xd4>)
 8000ae0:	f023 0302 	bic.w	r3, r3, #2
 8000ae4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d003      	beq.n	8000af4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	601a      	str	r2, [r3, #0]
            break;
 8000af2:	e00c      	b.n	8000b0e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000afa:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	029a      	lsls	r2, r3, #10
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8000b08:	68ba      	ldr	r2, [r7, #8]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d3dc      	bcc.n	8000ac8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000b0e:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <HAL_FLASHEx_Erase+0xd0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	761a      	strb	r2, [r3, #24]

  return status;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000150 	.word	0x20000150
 8000b24:	40022000 	.word	0x40022000

08000b28 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <FLASH_MassErase+0x30>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <FLASH_MassErase+0x34>)
 8000b38:	691b      	ldr	r3, [r3, #16]
 8000b3a:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <FLASH_MassErase+0x34>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <FLASH_MassErase+0x34>)
 8000b44:	691b      	ldr	r3, [r3, #16]
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <FLASH_MassErase+0x34>)
 8000b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b4c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	20000150 	.word	0x20000150
 8000b5c:	40022000 	.word	0x40022000

08000b60 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <FLASH_PageErase+0x38>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <FLASH_PageErase+0x3c>)
 8000b70:	691b      	ldr	r3, [r3, #16]
 8000b72:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <FLASH_PageErase+0x3c>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000b7a:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <FLASH_PageErase+0x3c>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <FLASH_PageErase+0x3c>)
 8000b82:	691b      	ldr	r3, [r3, #16]
 8000b84:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <FLASH_PageErase+0x3c>)
 8000b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b8a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000150 	.word	0x20000150
 8000b9c:	40022000 	.word	0x40022000

08000ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d101      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e26c      	b.n	800108c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 8087 	beq.w	8000cce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bc0:	4b92      	ldr	r3, [pc, #584]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f003 030c 	and.w	r3, r3, #12
 8000bc8:	2b04      	cmp	r3, #4
 8000bca:	d00c      	beq.n	8000be6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bcc:	4b8f      	ldr	r3, [pc, #572]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f003 030c 	and.w	r3, r3, #12
 8000bd4:	2b08      	cmp	r3, #8
 8000bd6:	d112      	bne.n	8000bfe <HAL_RCC_OscConfig+0x5e>
 8000bd8:	4b8c      	ldr	r3, [pc, #560]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000be4:	d10b      	bne.n	8000bfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be6:	4b89      	ldr	r3, [pc, #548]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d06c      	beq.n	8000ccc <HAL_RCC_OscConfig+0x12c>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d168      	bne.n	8000ccc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e246      	b.n	800108c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c06:	d106      	bne.n	8000c16 <HAL_RCC_OscConfig+0x76>
 8000c08:	4b80      	ldr	r3, [pc, #512]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a7f      	ldr	r2, [pc, #508]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c12:	6013      	str	r3, [r2, #0]
 8000c14:	e02e      	b.n	8000c74 <HAL_RCC_OscConfig+0xd4>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d10c      	bne.n	8000c38 <HAL_RCC_OscConfig+0x98>
 8000c1e:	4b7b      	ldr	r3, [pc, #492]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a7a      	ldr	r2, [pc, #488]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	4b78      	ldr	r3, [pc, #480]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a77      	ldr	r2, [pc, #476]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	e01d      	b.n	8000c74 <HAL_RCC_OscConfig+0xd4>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c40:	d10c      	bne.n	8000c5c <HAL_RCC_OscConfig+0xbc>
 8000c42:	4b72      	ldr	r3, [pc, #456]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a71      	ldr	r2, [pc, #452]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	4b6f      	ldr	r3, [pc, #444]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a6e      	ldr	r2, [pc, #440]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	e00b      	b.n	8000c74 <HAL_RCC_OscConfig+0xd4>
 8000c5c:	4b6b      	ldr	r3, [pc, #428]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a6a      	ldr	r2, [pc, #424]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c66:	6013      	str	r3, [r2, #0]
 8000c68:	4b68      	ldr	r3, [pc, #416]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a67      	ldr	r2, [pc, #412]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d013      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c7c:	f7ff fc74 	bl	8000568 <HAL_GetTick>
 8000c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c82:	e008      	b.n	8000c96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c84:	f7ff fc70 	bl	8000568 <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	2b64      	cmp	r3, #100	; 0x64
 8000c90:	d901      	bls.n	8000c96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c92:	2303      	movs	r3, #3
 8000c94:	e1fa      	b.n	800108c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c96:	4b5d      	ldr	r3, [pc, #372]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d0f0      	beq.n	8000c84 <HAL_RCC_OscConfig+0xe4>
 8000ca2:	e014      	b.n	8000cce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca4:	f7ff fc60 	bl	8000568 <HAL_GetTick>
 8000ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000caa:	e008      	b.n	8000cbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cac:	f7ff fc5c 	bl	8000568 <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	2b64      	cmp	r3, #100	; 0x64
 8000cb8:	d901      	bls.n	8000cbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e1e6      	b.n	800108c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cbe:	4b53      	ldr	r3, [pc, #332]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1f0      	bne.n	8000cac <HAL_RCC_OscConfig+0x10c>
 8000cca:	e000      	b.n	8000cce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d063      	beq.n	8000da2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cda:	4b4c      	ldr	r3, [pc, #304]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 030c 	and.w	r3, r3, #12
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d00b      	beq.n	8000cfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ce6:	4b49      	ldr	r3, [pc, #292]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 030c 	and.w	r3, r3, #12
 8000cee:	2b08      	cmp	r3, #8
 8000cf0:	d11c      	bne.n	8000d2c <HAL_RCC_OscConfig+0x18c>
 8000cf2:	4b46      	ldr	r3, [pc, #280]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d116      	bne.n	8000d2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cfe:	4b43      	ldr	r3, [pc, #268]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d005      	beq.n	8000d16 <HAL_RCC_OscConfig+0x176>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	691b      	ldr	r3, [r3, #16]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d001      	beq.n	8000d16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e1ba      	b.n	800108c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d16:	4b3d      	ldr	r3, [pc, #244]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	4939      	ldr	r1, [pc, #228]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000d26:	4313      	orrs	r3, r2
 8000d28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d2a:	e03a      	b.n	8000da2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	691b      	ldr	r3, [r3, #16]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d020      	beq.n	8000d76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d34:	4b36      	ldr	r3, [pc, #216]	; (8000e10 <HAL_RCC_OscConfig+0x270>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d3a:	f7ff fc15 	bl	8000568 <HAL_GetTick>
 8000d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d40:	e008      	b.n	8000d54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d42:	f7ff fc11 	bl	8000568 <HAL_GetTick>
 8000d46:	4602      	mov	r2, r0
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d901      	bls.n	8000d54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d50:	2303      	movs	r3, #3
 8000d52:	e19b      	b.n	800108c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d54:	4b2d      	ldr	r3, [pc, #180]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d0f0      	beq.n	8000d42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d60:	4b2a      	ldr	r3, [pc, #168]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	695b      	ldr	r3, [r3, #20]
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	4927      	ldr	r1, [pc, #156]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000d70:	4313      	orrs	r3, r2
 8000d72:	600b      	str	r3, [r1, #0]
 8000d74:	e015      	b.n	8000da2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d76:	4b26      	ldr	r3, [pc, #152]	; (8000e10 <HAL_RCC_OscConfig+0x270>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d7c:	f7ff fbf4 	bl	8000568 <HAL_GetTick>
 8000d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d82:	e008      	b.n	8000d96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d84:	f7ff fbf0 	bl	8000568 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d901      	bls.n	8000d96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d92:	2303      	movs	r3, #3
 8000d94:	e17a      	b.n	800108c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1f0      	bne.n	8000d84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0308 	and.w	r3, r3, #8
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d03a      	beq.n	8000e24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d019      	beq.n	8000dea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <HAL_RCC_OscConfig+0x274>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dbc:	f7ff fbd4 	bl	8000568 <HAL_GetTick>
 8000dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dc2:	e008      	b.n	8000dd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dc4:	f7ff fbd0 	bl	8000568 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e15a      	b.n	800108c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0f0      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000de2:	2001      	movs	r0, #1
 8000de4:	f000 faa6 	bl	8001334 <RCC_Delay>
 8000de8:	e01c      	b.n	8000e24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_RCC_OscConfig+0x274>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df0:	f7ff fbba 	bl	8000568 <HAL_GetTick>
 8000df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000df6:	e00f      	b.n	8000e18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000df8:	f7ff fbb6 	bl	8000568 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d908      	bls.n	8000e18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e140      	b.n	800108c <HAL_RCC_OscConfig+0x4ec>
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	42420000 	.word	0x42420000
 8000e14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e18:	4b9e      	ldr	r3, [pc, #632]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d1e9      	bne.n	8000df8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f000 80a6 	beq.w	8000f7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e32:	2300      	movs	r3, #0
 8000e34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e36:	4b97      	ldr	r3, [pc, #604]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d10d      	bne.n	8000e5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e42:	4b94      	ldr	r3, [pc, #592]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	4a93      	ldr	r2, [pc, #588]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4c:	61d3      	str	r3, [r2, #28]
 8000e4e:	4b91      	ldr	r3, [pc, #580]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e5e:	4b8e      	ldr	r3, [pc, #568]	; (8001098 <HAL_RCC_OscConfig+0x4f8>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d118      	bne.n	8000e9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e6a:	4b8b      	ldr	r3, [pc, #556]	; (8001098 <HAL_RCC_OscConfig+0x4f8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a8a      	ldr	r2, [pc, #552]	; (8001098 <HAL_RCC_OscConfig+0x4f8>)
 8000e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e76:	f7ff fb77 	bl	8000568 <HAL_GetTick>
 8000e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e7c:	e008      	b.n	8000e90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e7e:	f7ff fb73 	bl	8000568 <HAL_GetTick>
 8000e82:	4602      	mov	r2, r0
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	2b64      	cmp	r3, #100	; 0x64
 8000e8a:	d901      	bls.n	8000e90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	e0fd      	b.n	800108c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e90:	4b81      	ldr	r3, [pc, #516]	; (8001098 <HAL_RCC_OscConfig+0x4f8>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d0f0      	beq.n	8000e7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d106      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x312>
 8000ea4:	4b7b      	ldr	r3, [pc, #492]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000ea6:	6a1b      	ldr	r3, [r3, #32]
 8000ea8:	4a7a      	ldr	r2, [pc, #488]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	6213      	str	r3, [r2, #32]
 8000eb0:	e02d      	b.n	8000f0e <HAL_RCC_OscConfig+0x36e>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d10c      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x334>
 8000eba:	4b76      	ldr	r3, [pc, #472]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000ebc:	6a1b      	ldr	r3, [r3, #32]
 8000ebe:	4a75      	ldr	r2, [pc, #468]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000ec0:	f023 0301 	bic.w	r3, r3, #1
 8000ec4:	6213      	str	r3, [r2, #32]
 8000ec6:	4b73      	ldr	r3, [pc, #460]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000ec8:	6a1b      	ldr	r3, [r3, #32]
 8000eca:	4a72      	ldr	r2, [pc, #456]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000ecc:	f023 0304 	bic.w	r3, r3, #4
 8000ed0:	6213      	str	r3, [r2, #32]
 8000ed2:	e01c      	b.n	8000f0e <HAL_RCC_OscConfig+0x36e>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	2b05      	cmp	r3, #5
 8000eda:	d10c      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x356>
 8000edc:	4b6d      	ldr	r3, [pc, #436]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	4a6c      	ldr	r2, [pc, #432]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000ee2:	f043 0304 	orr.w	r3, r3, #4
 8000ee6:	6213      	str	r3, [r2, #32]
 8000ee8:	4b6a      	ldr	r3, [pc, #424]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	4a69      	ldr	r2, [pc, #420]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	6213      	str	r3, [r2, #32]
 8000ef4:	e00b      	b.n	8000f0e <HAL_RCC_OscConfig+0x36e>
 8000ef6:	4b67      	ldr	r3, [pc, #412]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000ef8:	6a1b      	ldr	r3, [r3, #32]
 8000efa:	4a66      	ldr	r2, [pc, #408]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000efc:	f023 0301 	bic.w	r3, r3, #1
 8000f00:	6213      	str	r3, [r2, #32]
 8000f02:	4b64      	ldr	r3, [pc, #400]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000f04:	6a1b      	ldr	r3, [r3, #32]
 8000f06:	4a63      	ldr	r2, [pc, #396]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000f08:	f023 0304 	bic.w	r3, r3, #4
 8000f0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d015      	beq.n	8000f42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f16:	f7ff fb27 	bl	8000568 <HAL_GetTick>
 8000f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f1c:	e00a      	b.n	8000f34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f1e:	f7ff fb23 	bl	8000568 <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d901      	bls.n	8000f34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e0ab      	b.n	800108c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f34:	4b57      	ldr	r3, [pc, #348]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000f36:	6a1b      	ldr	r3, [r3, #32]
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0ee      	beq.n	8000f1e <HAL_RCC_OscConfig+0x37e>
 8000f40:	e014      	b.n	8000f6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f42:	f7ff fb11 	bl	8000568 <HAL_GetTick>
 8000f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f48:	e00a      	b.n	8000f60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f4a:	f7ff fb0d 	bl	8000568 <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e095      	b.n	800108c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f60:	4b4c      	ldr	r3, [pc, #304]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000f62:	6a1b      	ldr	r3, [r3, #32]
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1ee      	bne.n	8000f4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f6c:	7dfb      	ldrb	r3, [r7, #23]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d105      	bne.n	8000f7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f72:	4b48      	ldr	r3, [pc, #288]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	4a47      	ldr	r2, [pc, #284]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 8081 	beq.w	800108a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f88:	4b42      	ldr	r3, [pc, #264]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 030c 	and.w	r3, r3, #12
 8000f90:	2b08      	cmp	r3, #8
 8000f92:	d061      	beq.n	8001058 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69db      	ldr	r3, [r3, #28]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d146      	bne.n	800102a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f9c:	4b3f      	ldr	r3, [pc, #252]	; (800109c <HAL_RCC_OscConfig+0x4fc>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa2:	f7ff fae1 	bl	8000568 <HAL_GetTick>
 8000fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fa8:	e008      	b.n	8000fbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000faa:	f7ff fadd 	bl	8000568 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d901      	bls.n	8000fbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e067      	b.n	800108c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fbc:	4b35      	ldr	r3, [pc, #212]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1f0      	bne.n	8000faa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a1b      	ldr	r3, [r3, #32]
 8000fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd0:	d108      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fd2:	4b30      	ldr	r3, [pc, #192]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	492d      	ldr	r1, [pc, #180]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fe4:	4b2b      	ldr	r3, [pc, #172]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a19      	ldr	r1, [r3, #32]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	430b      	orrs	r3, r1
 8000ff6:	4927      	ldr	r1, [pc, #156]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ffc:	4b27      	ldr	r3, [pc, #156]	; (800109c <HAL_RCC_OscConfig+0x4fc>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001002:	f7ff fab1 	bl	8000568 <HAL_GetTick>
 8001006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001008:	e008      	b.n	800101c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800100a:	f7ff faad 	bl	8000568 <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d901      	bls.n	800101c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001018:	2303      	movs	r3, #3
 800101a:	e037      	b.n	800108c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d0f0      	beq.n	800100a <HAL_RCC_OscConfig+0x46a>
 8001028:	e02f      	b.n	800108a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800102a:	4b1c      	ldr	r3, [pc, #112]	; (800109c <HAL_RCC_OscConfig+0x4fc>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001030:	f7ff fa9a 	bl	8000568 <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001038:	f7ff fa96 	bl	8000568 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b02      	cmp	r3, #2
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e020      	b.n	800108c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1f0      	bne.n	8001038 <HAL_RCC_OscConfig+0x498>
 8001056:	e018      	b.n	800108a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	69db      	ldr	r3, [r3, #28]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d101      	bne.n	8001064 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e013      	b.n	800108c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <HAL_RCC_OscConfig+0x4f4>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	429a      	cmp	r2, r3
 8001076:	d106      	bne.n	8001086 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001082:	429a      	cmp	r2, r3
 8001084:	d001      	beq.n	800108a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40021000 	.word	0x40021000
 8001098:	40007000 	.word	0x40007000
 800109c:	42420060 	.word	0x42420060

080010a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e0d0      	b.n	8001256 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010b4:	4b6a      	ldr	r3, [pc, #424]	; (8001260 <HAL_RCC_ClockConfig+0x1c0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d910      	bls.n	80010e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010c2:	4b67      	ldr	r3, [pc, #412]	; (8001260 <HAL_RCC_ClockConfig+0x1c0>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f023 0207 	bic.w	r2, r3, #7
 80010ca:	4965      	ldr	r1, [pc, #404]	; (8001260 <HAL_RCC_ClockConfig+0x1c0>)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010d2:	4b63      	ldr	r3, [pc, #396]	; (8001260 <HAL_RCC_ClockConfig+0x1c0>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d001      	beq.n	80010e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e0b8      	b.n	8001256 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d020      	beq.n	8001132 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d005      	beq.n	8001108 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010fc:	4b59      	ldr	r3, [pc, #356]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	4a58      	ldr	r2, [pc, #352]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 8001102:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001106:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0308 	and.w	r3, r3, #8
 8001110:	2b00      	cmp	r3, #0
 8001112:	d005      	beq.n	8001120 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001114:	4b53      	ldr	r3, [pc, #332]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	4a52      	ldr	r2, [pc, #328]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800111e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001120:	4b50      	ldr	r3, [pc, #320]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	494d      	ldr	r1, [pc, #308]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 800112e:	4313      	orrs	r3, r2
 8001130:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b00      	cmp	r3, #0
 800113c:	d040      	beq.n	80011c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d107      	bne.n	8001156 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001146:	4b47      	ldr	r3, [pc, #284]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d115      	bne.n	800117e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e07f      	b.n	8001256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b02      	cmp	r3, #2
 800115c:	d107      	bne.n	800116e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800115e:	4b41      	ldr	r3, [pc, #260]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d109      	bne.n	800117e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e073      	b.n	8001256 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116e:	4b3d      	ldr	r3, [pc, #244]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e06b      	b.n	8001256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800117e:	4b39      	ldr	r3, [pc, #228]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f023 0203 	bic.w	r2, r3, #3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	4936      	ldr	r1, [pc, #216]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 800118c:	4313      	orrs	r3, r2
 800118e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001190:	f7ff f9ea 	bl	8000568 <HAL_GetTick>
 8001194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001196:	e00a      	b.n	80011ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001198:	f7ff f9e6 	bl	8000568 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e053      	b.n	8001256 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ae:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 020c 	and.w	r2, r3, #12
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	429a      	cmp	r2, r3
 80011be:	d1eb      	bne.n	8001198 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011c0:	4b27      	ldr	r3, [pc, #156]	; (8001260 <HAL_RCC_ClockConfig+0x1c0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0307 	and.w	r3, r3, #7
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d210      	bcs.n	80011f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ce:	4b24      	ldr	r3, [pc, #144]	; (8001260 <HAL_RCC_ClockConfig+0x1c0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f023 0207 	bic.w	r2, r3, #7
 80011d6:	4922      	ldr	r1, [pc, #136]	; (8001260 <HAL_RCC_ClockConfig+0x1c0>)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	4313      	orrs	r3, r2
 80011dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <HAL_RCC_ClockConfig+0x1c0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d001      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e032      	b.n	8001256 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d008      	beq.n	800120e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	4916      	ldr	r1, [pc, #88]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 800120a:	4313      	orrs	r3, r2
 800120c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	2b00      	cmp	r3, #0
 8001218:	d009      	beq.n	800122e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	490e      	ldr	r1, [pc, #56]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 800122a:	4313      	orrs	r3, r2
 800122c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800122e:	f000 f821 	bl	8001274 <HAL_RCC_GetSysClockFreq>
 8001232:	4602      	mov	r2, r0
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	490a      	ldr	r1, [pc, #40]	; (8001268 <HAL_RCC_ClockConfig+0x1c8>)
 8001240:	5ccb      	ldrb	r3, [r1, r3]
 8001242:	fa22 f303 	lsr.w	r3, r2, r3
 8001246:	4a09      	ldr	r2, [pc, #36]	; (800126c <HAL_RCC_ClockConfig+0x1cc>)
 8001248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_RCC_ClockConfig+0x1d0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f948 	bl	80004e4 <HAL_InitTick>

  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40022000 	.word	0x40022000
 8001264:	40021000 	.word	0x40021000
 8001268:	080022f0 	.word	0x080022f0
 800126c:	20000000 	.word	0x20000000
 8001270:	20000004 	.word	0x20000004

08001274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001274:	b490      	push	{r4, r7}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800127a:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <HAL_RCC_GetSysClockFreq+0xb0>)
 800127c:	1d3c      	adds	r4, r7, #4
 800127e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001280:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001284:	f240 2301 	movw	r3, #513	; 0x201
 8001288:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800129a:	2300      	movs	r3, #0
 800129c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800129e:	4b22      	ldr	r3, [pc, #136]	; (8001328 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	d002      	beq.n	80012b4 <HAL_RCC_GetSysClockFreq+0x40>
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d003      	beq.n	80012ba <HAL_RCC_GetSysClockFreq+0x46>
 80012b2:	e02d      	b.n	8001310 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012b4:	4b1d      	ldr	r3, [pc, #116]	; (800132c <HAL_RCC_GetSysClockFreq+0xb8>)
 80012b6:	623b      	str	r3, [r7, #32]
      break;
 80012b8:	e02d      	b.n	8001316 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	0c9b      	lsrs	r3, r3, #18
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012c6:	4413      	add	r3, r2
 80012c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012cc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d013      	beq.n	8001300 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	0c5b      	lsrs	r3, r3, #17
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012e6:	4413      	add	r3, r2
 80012e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80012ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	4a0e      	ldr	r2, [pc, #56]	; (800132c <HAL_RCC_GetSysClockFreq+0xb8>)
 80012f2:	fb02 f203 	mul.w	r2, r2, r3
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
 80012fe:	e004      	b.n	800130a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001304:	fb02 f303 	mul.w	r3, r2, r3
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	623b      	str	r3, [r7, #32]
      break;
 800130e:	e002      	b.n	8001316 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001312:	623b      	str	r3, [r7, #32]
      break;
 8001314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001316:	6a3b      	ldr	r3, [r7, #32]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3728      	adds	r7, #40	; 0x28
 800131c:	46bd      	mov	sp, r7
 800131e:	bc90      	pop	{r4, r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	080022e0 	.word	0x080022e0
 8001328:	40021000 	.word	0x40021000
 800132c:	007a1200 	.word	0x007a1200
 8001330:	003d0900 	.word	0x003d0900

08001334 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <RCC_Delay+0x34>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a0a      	ldr	r2, [pc, #40]	; (800136c <RCC_Delay+0x38>)
 8001342:	fba2 2303 	umull	r2, r3, r2, r3
 8001346:	0a5b      	lsrs	r3, r3, #9
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	fb02 f303 	mul.w	r3, r2, r3
 800134e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001350:	bf00      	nop
  }
  while (Delay --);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1e5a      	subs	r2, r3, #1
 8001356:	60fa      	str	r2, [r7, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f9      	bne.n	8001350 <RCC_Delay+0x1c>
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	20000000 	.word	0x20000000
 800136c:	10624dd3 	.word	0x10624dd3

08001370 <findslot>:
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <findslot+0x2c>)
 8001372:	b510      	push	{r4, lr}
 8001374:	4604      	mov	r4, r0
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	b118      	cbz	r0, 8001382 <findslot+0x12>
 800137a:	6983      	ldr	r3, [r0, #24]
 800137c:	b90b      	cbnz	r3, 8001382 <findslot+0x12>
 800137e:	f000 fafb 	bl	8001978 <__sinit>
 8001382:	2c13      	cmp	r4, #19
 8001384:	d807      	bhi.n	8001396 <findslot+0x26>
 8001386:	4806      	ldr	r0, [pc, #24]	; (80013a0 <findslot+0x30>)
 8001388:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800138c:	3201      	adds	r2, #1
 800138e:	d002      	beq.n	8001396 <findslot+0x26>
 8001390:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001394:	bd10      	pop	{r4, pc}
 8001396:	2000      	movs	r0, #0
 8001398:	e7fc      	b.n	8001394 <findslot+0x24>
 800139a:	bf00      	nop
 800139c:	20000014 	.word	0x20000014
 80013a0:	200000a4 	.word	0x200000a4

080013a4 <checkerror>:
 80013a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013a6:	1c43      	adds	r3, r0, #1
 80013a8:	4604      	mov	r4, r0
 80013aa:	d109      	bne.n	80013c0 <checkerror+0x1c>
 80013ac:	f000 fa86 	bl	80018bc <__errno>
 80013b0:	2613      	movs	r6, #19
 80013b2:	4605      	mov	r5, r0
 80013b4:	2700      	movs	r7, #0
 80013b6:	4630      	mov	r0, r6
 80013b8:	4639      	mov	r1, r7
 80013ba:	beab      	bkpt	0x00ab
 80013bc:	4606      	mov	r6, r0
 80013be:	602e      	str	r6, [r5, #0]
 80013c0:	4620      	mov	r0, r4
 80013c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080013c4 <error>:
 80013c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c6:	4604      	mov	r4, r0
 80013c8:	f000 fa78 	bl	80018bc <__errno>
 80013cc:	2613      	movs	r6, #19
 80013ce:	4605      	mov	r5, r0
 80013d0:	2700      	movs	r7, #0
 80013d2:	4630      	mov	r0, r6
 80013d4:	4639      	mov	r1, r7
 80013d6:	beab      	bkpt	0x00ab
 80013d8:	4606      	mov	r6, r0
 80013da:	4620      	mov	r0, r4
 80013dc:	602e      	str	r6, [r5, #0]
 80013de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080013e0 <_swiread>:
 80013e0:	b530      	push	{r4, r5, lr}
 80013e2:	b085      	sub	sp, #20
 80013e4:	2406      	movs	r4, #6
 80013e6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80013ea:	9203      	str	r2, [sp, #12]
 80013ec:	ad01      	add	r5, sp, #4
 80013ee:	4620      	mov	r0, r4
 80013f0:	4629      	mov	r1, r5
 80013f2:	beab      	bkpt	0x00ab
 80013f4:	4604      	mov	r4, r0
 80013f6:	4620      	mov	r0, r4
 80013f8:	f7ff ffd4 	bl	80013a4 <checkerror>
 80013fc:	b005      	add	sp, #20
 80013fe:	bd30      	pop	{r4, r5, pc}

08001400 <_read>:
 8001400:	b570      	push	{r4, r5, r6, lr}
 8001402:	460e      	mov	r6, r1
 8001404:	4615      	mov	r5, r2
 8001406:	f7ff ffb3 	bl	8001370 <findslot>
 800140a:	4604      	mov	r4, r0
 800140c:	b930      	cbnz	r0, 800141c <_read+0x1c>
 800140e:	f000 fa55 	bl	80018bc <__errno>
 8001412:	2309      	movs	r3, #9
 8001414:	6003      	str	r3, [r0, #0]
 8001416:	f04f 30ff 	mov.w	r0, #4294967295
 800141a:	bd70      	pop	{r4, r5, r6, pc}
 800141c:	462a      	mov	r2, r5
 800141e:	4631      	mov	r1, r6
 8001420:	6800      	ldr	r0, [r0, #0]
 8001422:	f7ff ffdd 	bl	80013e0 <_swiread>
 8001426:	1c43      	adds	r3, r0, #1
 8001428:	bf1f      	itttt	ne
 800142a:	6863      	ldrne	r3, [r4, #4]
 800142c:	1a28      	subne	r0, r5, r0
 800142e:	181b      	addne	r3, r3, r0
 8001430:	6063      	strne	r3, [r4, #4]
 8001432:	e7f2      	b.n	800141a <_read+0x1a>

08001434 <_swilseek>:
 8001434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001436:	460c      	mov	r4, r1
 8001438:	4616      	mov	r6, r2
 800143a:	f7ff ff99 	bl	8001370 <findslot>
 800143e:	4605      	mov	r5, r0
 8001440:	b940      	cbnz	r0, 8001454 <_swilseek+0x20>
 8001442:	f000 fa3b 	bl	80018bc <__errno>
 8001446:	2309      	movs	r3, #9
 8001448:	6003      	str	r3, [r0, #0]
 800144a:	f04f 34ff 	mov.w	r4, #4294967295
 800144e:	4620      	mov	r0, r4
 8001450:	b003      	add	sp, #12
 8001452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001454:	2e02      	cmp	r6, #2
 8001456:	d903      	bls.n	8001460 <_swilseek+0x2c>
 8001458:	f000 fa30 	bl	80018bc <__errno>
 800145c:	2316      	movs	r3, #22
 800145e:	e7f3      	b.n	8001448 <_swilseek+0x14>
 8001460:	2e01      	cmp	r6, #1
 8001462:	d112      	bne.n	800148a <_swilseek+0x56>
 8001464:	6843      	ldr	r3, [r0, #4]
 8001466:	18e4      	adds	r4, r4, r3
 8001468:	d4f6      	bmi.n	8001458 <_swilseek+0x24>
 800146a:	682b      	ldr	r3, [r5, #0]
 800146c:	260a      	movs	r6, #10
 800146e:	466f      	mov	r7, sp
 8001470:	e9cd 3400 	strd	r3, r4, [sp]
 8001474:	4630      	mov	r0, r6
 8001476:	4639      	mov	r1, r7
 8001478:	beab      	bkpt	0x00ab
 800147a:	4606      	mov	r6, r0
 800147c:	4630      	mov	r0, r6
 800147e:	f7ff ff91 	bl	80013a4 <checkerror>
 8001482:	2800      	cmp	r0, #0
 8001484:	dbe1      	blt.n	800144a <_swilseek+0x16>
 8001486:	606c      	str	r4, [r5, #4]
 8001488:	e7e1      	b.n	800144e <_swilseek+0x1a>
 800148a:	2e02      	cmp	r6, #2
 800148c:	d1ed      	bne.n	800146a <_swilseek+0x36>
 800148e:	6803      	ldr	r3, [r0, #0]
 8001490:	260c      	movs	r6, #12
 8001492:	466f      	mov	r7, sp
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	4630      	mov	r0, r6
 8001498:	4639      	mov	r1, r7
 800149a:	beab      	bkpt	0x00ab
 800149c:	4606      	mov	r6, r0
 800149e:	4630      	mov	r0, r6
 80014a0:	f7ff ff80 	bl	80013a4 <checkerror>
 80014a4:	1c43      	adds	r3, r0, #1
 80014a6:	d0d0      	beq.n	800144a <_swilseek+0x16>
 80014a8:	4404      	add	r4, r0
 80014aa:	e7de      	b.n	800146a <_swilseek+0x36>

080014ac <_lseek>:
 80014ac:	f7ff bfc2 	b.w	8001434 <_swilseek>

080014b0 <_swiwrite>:
 80014b0:	b530      	push	{r4, r5, lr}
 80014b2:	b085      	sub	sp, #20
 80014b4:	2405      	movs	r4, #5
 80014b6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80014ba:	9203      	str	r2, [sp, #12]
 80014bc:	ad01      	add	r5, sp, #4
 80014be:	4620      	mov	r0, r4
 80014c0:	4629      	mov	r1, r5
 80014c2:	beab      	bkpt	0x00ab
 80014c4:	4604      	mov	r4, r0
 80014c6:	4620      	mov	r0, r4
 80014c8:	f7ff ff6c 	bl	80013a4 <checkerror>
 80014cc:	b005      	add	sp, #20
 80014ce:	bd30      	pop	{r4, r5, pc}

080014d0 <_write>:
 80014d0:	b570      	push	{r4, r5, r6, lr}
 80014d2:	460e      	mov	r6, r1
 80014d4:	4615      	mov	r5, r2
 80014d6:	f7ff ff4b 	bl	8001370 <findslot>
 80014da:	4604      	mov	r4, r0
 80014dc:	b930      	cbnz	r0, 80014ec <_write+0x1c>
 80014de:	f000 f9ed 	bl	80018bc <__errno>
 80014e2:	2309      	movs	r3, #9
 80014e4:	6003      	str	r3, [r0, #0]
 80014e6:	f04f 30ff 	mov.w	r0, #4294967295
 80014ea:	bd70      	pop	{r4, r5, r6, pc}
 80014ec:	462a      	mov	r2, r5
 80014ee:	4631      	mov	r1, r6
 80014f0:	6800      	ldr	r0, [r0, #0]
 80014f2:	f7ff ffdd 	bl	80014b0 <_swiwrite>
 80014f6:	1e03      	subs	r3, r0, #0
 80014f8:	dbf5      	blt.n	80014e6 <_write+0x16>
 80014fa:	6862      	ldr	r2, [r4, #4]
 80014fc:	1ae8      	subs	r0, r5, r3
 80014fe:	4402      	add	r2, r0
 8001500:	42ab      	cmp	r3, r5
 8001502:	6062      	str	r2, [r4, #4]
 8001504:	d1f1      	bne.n	80014ea <_write+0x1a>
 8001506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800150a:	2000      	movs	r0, #0
 800150c:	f7ff bf5a 	b.w	80013c4 <error>

08001510 <_swiclose>:
 8001510:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001512:	2402      	movs	r4, #2
 8001514:	9001      	str	r0, [sp, #4]
 8001516:	ad01      	add	r5, sp, #4
 8001518:	4620      	mov	r0, r4
 800151a:	4629      	mov	r1, r5
 800151c:	beab      	bkpt	0x00ab
 800151e:	4604      	mov	r4, r0
 8001520:	4620      	mov	r0, r4
 8001522:	f7ff ff3f 	bl	80013a4 <checkerror>
 8001526:	b003      	add	sp, #12
 8001528:	bd30      	pop	{r4, r5, pc}
	...

0800152c <_close>:
 800152c:	b538      	push	{r3, r4, r5, lr}
 800152e:	4605      	mov	r5, r0
 8001530:	f7ff ff1e 	bl	8001370 <findslot>
 8001534:	4604      	mov	r4, r0
 8001536:	b930      	cbnz	r0, 8001546 <_close+0x1a>
 8001538:	f000 f9c0 	bl	80018bc <__errno>
 800153c:	2309      	movs	r3, #9
 800153e:	6003      	str	r3, [r0, #0]
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	bd38      	pop	{r3, r4, r5, pc}
 8001546:	3d01      	subs	r5, #1
 8001548:	2d01      	cmp	r5, #1
 800154a:	d809      	bhi.n	8001560 <_close+0x34>
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <_close+0x48>)
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	429a      	cmp	r2, r3
 8001554:	d104      	bne.n	8001560 <_close+0x34>
 8001556:	f04f 33ff 	mov.w	r3, #4294967295
 800155a:	6003      	str	r3, [r0, #0]
 800155c:	2000      	movs	r0, #0
 800155e:	e7f1      	b.n	8001544 <_close+0x18>
 8001560:	6820      	ldr	r0, [r4, #0]
 8001562:	f7ff ffd5 	bl	8001510 <_swiclose>
 8001566:	2800      	cmp	r0, #0
 8001568:	d1ec      	bne.n	8001544 <_close+0x18>
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
 800156e:	6023      	str	r3, [r4, #0]
 8001570:	e7e8      	b.n	8001544 <_close+0x18>
 8001572:	bf00      	nop
 8001574:	200000a4 	.word	0x200000a4

08001578 <_swistat>:
 8001578:	b570      	push	{r4, r5, r6, lr}
 800157a:	460c      	mov	r4, r1
 800157c:	f7ff fef8 	bl	8001370 <findslot>
 8001580:	4605      	mov	r5, r0
 8001582:	b930      	cbnz	r0, 8001592 <_swistat+0x1a>
 8001584:	f000 f99a 	bl	80018bc <__errno>
 8001588:	2309      	movs	r3, #9
 800158a:	6003      	str	r3, [r0, #0]
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	bd70      	pop	{r4, r5, r6, pc}
 8001592:	6863      	ldr	r3, [r4, #4]
 8001594:	260c      	movs	r6, #12
 8001596:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800159a:	6063      	str	r3, [r4, #4]
 800159c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a0:	64a3      	str	r3, [r4, #72]	; 0x48
 80015a2:	4630      	mov	r0, r6
 80015a4:	4629      	mov	r1, r5
 80015a6:	beab      	bkpt	0x00ab
 80015a8:	4605      	mov	r5, r0
 80015aa:	4628      	mov	r0, r5
 80015ac:	f7ff fefa 	bl	80013a4 <checkerror>
 80015b0:	1c43      	adds	r3, r0, #1
 80015b2:	bf1c      	itt	ne
 80015b4:	6120      	strne	r0, [r4, #16]
 80015b6:	2000      	movne	r0, #0
 80015b8:	e7ea      	b.n	8001590 <_swistat+0x18>

080015ba <_fstat>:
 80015ba:	460b      	mov	r3, r1
 80015bc:	b510      	push	{r4, lr}
 80015be:	2100      	movs	r1, #0
 80015c0:	4604      	mov	r4, r0
 80015c2:	2258      	movs	r2, #88	; 0x58
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 fa9c 	bl	8001b02 <memset>
 80015ca:	4601      	mov	r1, r0
 80015cc:	4620      	mov	r0, r4
 80015ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015d2:	f7ff bfd1 	b.w	8001578 <_swistat>

080015d6 <_stat>:
 80015d6:	b538      	push	{r3, r4, r5, lr}
 80015d8:	460d      	mov	r5, r1
 80015da:	4604      	mov	r4, r0
 80015dc:	2258      	movs	r2, #88	; 0x58
 80015de:	2100      	movs	r1, #0
 80015e0:	4628      	mov	r0, r5
 80015e2:	f000 fa8e 	bl	8001b02 <memset>
 80015e6:	4620      	mov	r0, r4
 80015e8:	2100      	movs	r1, #0
 80015ea:	f000 f811 	bl	8001610 <_swiopen>
 80015ee:	1c43      	adds	r3, r0, #1
 80015f0:	4604      	mov	r4, r0
 80015f2:	d00b      	beq.n	800160c <_stat+0x36>
 80015f4:	686b      	ldr	r3, [r5, #4]
 80015f6:	4629      	mov	r1, r5
 80015f8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80015fc:	606b      	str	r3, [r5, #4]
 80015fe:	f7ff ffbb 	bl	8001578 <_swistat>
 8001602:	4605      	mov	r5, r0
 8001604:	4620      	mov	r0, r4
 8001606:	f7ff ff91 	bl	800152c <_close>
 800160a:	462c      	mov	r4, r5
 800160c:	4620      	mov	r0, r4
 800160e:	bd38      	pop	{r3, r4, r5, pc}

08001610 <_swiopen>:
 8001610:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <_swiopen+0xb0>)
 8001612:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001616:	4681      	mov	r9, r0
 8001618:	460f      	mov	r7, r1
 800161a:	2500      	movs	r5, #0
 800161c:	461e      	mov	r6, r3
 800161e:	b097      	sub	sp, #92	; 0x5c
 8001620:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8001624:	1c61      	adds	r1, r4, #1
 8001626:	d037      	beq.n	8001698 <_swiopen+0x88>
 8001628:	3501      	adds	r5, #1
 800162a:	2d14      	cmp	r5, #20
 800162c:	d1f8      	bne.n	8001620 <_swiopen+0x10>
 800162e:	f000 f945 	bl	80018bc <__errno>
 8001632:	2318      	movs	r3, #24
 8001634:	f04f 34ff 	mov.w	r4, #4294967295
 8001638:	6003      	str	r3, [r0, #0]
 800163a:	e03d      	b.n	80016b8 <_swiopen+0xa8>
 800163c:	f240 6301 	movw	r3, #1537	; 0x601
 8001640:	f3c7 4400 	ubfx	r4, r7, #16, #1
 8001644:	07ba      	lsls	r2, r7, #30
 8001646:	bf48      	it	mi
 8001648:	f044 0402 	orrmi.w	r4, r4, #2
 800164c:	421f      	tst	r7, r3
 800164e:	bf18      	it	ne
 8001650:	f044 0404 	orrne.w	r4, r4, #4
 8001654:	073b      	lsls	r3, r7, #28
 8001656:	bf48      	it	mi
 8001658:	f024 0404 	bicmi.w	r4, r4, #4
 800165c:	4648      	mov	r0, r9
 800165e:	bf48      	it	mi
 8001660:	f044 0408 	orrmi.w	r4, r4, #8
 8001664:	f8cd 9000 	str.w	r9, [sp]
 8001668:	f7fe fd70 	bl	800014c <strlen>
 800166c:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8001670:	2401      	movs	r4, #1
 8001672:	4620      	mov	r0, r4
 8001674:	4641      	mov	r1, r8
 8001676:	beab      	bkpt	0x00ab
 8001678:	4604      	mov	r4, r0
 800167a:	2c00      	cmp	r4, #0
 800167c:	db07      	blt.n	800168e <_swiopen+0x7e>
 800167e:	2300      	movs	r3, #0
 8001680:	f846 4035 	str.w	r4, [r6, r5, lsl #3]
 8001684:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 8001688:	462c      	mov	r4, r5
 800168a:	6073      	str	r3, [r6, #4]
 800168c:	e014      	b.n	80016b8 <_swiopen+0xa8>
 800168e:	4620      	mov	r0, r4
 8001690:	f7ff fe98 	bl	80013c4 <error>
 8001694:	4604      	mov	r4, r0
 8001696:	e00f      	b.n	80016b8 <_swiopen+0xa8>
 8001698:	f407 6320 	and.w	r3, r7, #2560	; 0xa00
 800169c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80016a0:	46e8      	mov	r8, sp
 80016a2:	d1cb      	bne.n	800163c <_swiopen+0x2c>
 80016a4:	4641      	mov	r1, r8
 80016a6:	4648      	mov	r0, r9
 80016a8:	f7ff ff95 	bl	80015d6 <_stat>
 80016ac:	3001      	adds	r0, #1
 80016ae:	d0c5      	beq.n	800163c <_swiopen+0x2c>
 80016b0:	f000 f904 	bl	80018bc <__errno>
 80016b4:	2311      	movs	r3, #17
 80016b6:	6003      	str	r3, [r0, #0]
 80016b8:	4620      	mov	r0, r4
 80016ba:	b017      	add	sp, #92	; 0x5c
 80016bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016c0:	200000a4 	.word	0x200000a4

080016c4 <_get_semihosting_exts>:
 80016c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80016c8:	4606      	mov	r6, r0
 80016ca:	460f      	mov	r7, r1
 80016cc:	482a      	ldr	r0, [pc, #168]	; (8001778 <_get_semihosting_exts+0xb4>)
 80016ce:	2100      	movs	r1, #0
 80016d0:	4615      	mov	r5, r2
 80016d2:	f7ff ff9d 	bl	8001610 <_swiopen>
 80016d6:	4604      	mov	r4, r0
 80016d8:	462a      	mov	r2, r5
 80016da:	2100      	movs	r1, #0
 80016dc:	4630      	mov	r0, r6
 80016de:	f000 fa10 	bl	8001b02 <memset>
 80016e2:	1c63      	adds	r3, r4, #1
 80016e4:	d016      	beq.n	8001714 <_get_semihosting_exts+0x50>
 80016e6:	4620      	mov	r0, r4
 80016e8:	f7ff fe42 	bl	8001370 <findslot>
 80016ec:	f04f 080c 	mov.w	r8, #12
 80016f0:	4681      	mov	r9, r0
 80016f2:	4640      	mov	r0, r8
 80016f4:	4649      	mov	r1, r9
 80016f6:	beab      	bkpt	0x00ab
 80016f8:	4680      	mov	r8, r0
 80016fa:	4640      	mov	r0, r8
 80016fc:	f7ff fe52 	bl	80013a4 <checkerror>
 8001700:	2803      	cmp	r0, #3
 8001702:	dd02      	ble.n	800170a <_get_semihosting_exts+0x46>
 8001704:	1ec3      	subs	r3, r0, #3
 8001706:	42ab      	cmp	r3, r5
 8001708:	dc08      	bgt.n	800171c <_get_semihosting_exts+0x58>
 800170a:	4620      	mov	r0, r4
 800170c:	f7ff ff0e 	bl	800152c <_close>
 8001710:	f04f 34ff 	mov.w	r4, #4294967295
 8001714:	4620      	mov	r0, r4
 8001716:	b003      	add	sp, #12
 8001718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800171c:	2204      	movs	r2, #4
 800171e:	4620      	mov	r0, r4
 8001720:	eb0d 0102 	add.w	r1, sp, r2
 8001724:	f7ff fe6c 	bl	8001400 <_read>
 8001728:	2803      	cmp	r0, #3
 800172a:	ddee      	ble.n	800170a <_get_semihosting_exts+0x46>
 800172c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001730:	2b53      	cmp	r3, #83	; 0x53
 8001732:	d1ea      	bne.n	800170a <_get_semihosting_exts+0x46>
 8001734:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001738:	2b48      	cmp	r3, #72	; 0x48
 800173a:	d1e6      	bne.n	800170a <_get_semihosting_exts+0x46>
 800173c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001740:	2b46      	cmp	r3, #70	; 0x46
 8001742:	d1e2      	bne.n	800170a <_get_semihosting_exts+0x46>
 8001744:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001748:	2b42      	cmp	r3, #66	; 0x42
 800174a:	d1de      	bne.n	800170a <_get_semihosting_exts+0x46>
 800174c:	2201      	movs	r2, #1
 800174e:	4639      	mov	r1, r7
 8001750:	4620      	mov	r0, r4
 8001752:	f7ff fe6f 	bl	8001434 <_swilseek>
 8001756:	2800      	cmp	r0, #0
 8001758:	dbd7      	blt.n	800170a <_get_semihosting_exts+0x46>
 800175a:	462a      	mov	r2, r5
 800175c:	4631      	mov	r1, r6
 800175e:	4620      	mov	r0, r4
 8001760:	f7ff fe4e 	bl	8001400 <_read>
 8001764:	4605      	mov	r5, r0
 8001766:	4620      	mov	r0, r4
 8001768:	f7ff fee0 	bl	800152c <_close>
 800176c:	4628      	mov	r0, r5
 800176e:	f7ff fe19 	bl	80013a4 <checkerror>
 8001772:	4604      	mov	r4, r0
 8001774:	e7ce      	b.n	8001714 <_get_semihosting_exts+0x50>
 8001776:	bf00      	nop
 8001778:	08002300 	.word	0x08002300

0800177c <initialise_semihosting_exts>:
 800177c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800177e:	2100      	movs	r1, #0
 8001780:	2201      	movs	r2, #1
 8001782:	4d09      	ldr	r5, [pc, #36]	; (80017a8 <initialise_semihosting_exts+0x2c>)
 8001784:	4c09      	ldr	r4, [pc, #36]	; (80017ac <initialise_semihosting_exts+0x30>)
 8001786:	a801      	add	r0, sp, #4
 8001788:	6029      	str	r1, [r5, #0]
 800178a:	6022      	str	r2, [r4, #0]
 800178c:	f7ff ff9a 	bl	80016c4 <_get_semihosting_exts>
 8001790:	2800      	cmp	r0, #0
 8001792:	dd07      	ble.n	80017a4 <initialise_semihosting_exts+0x28>
 8001794:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001798:	f003 0201 	and.w	r2, r3, #1
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	602a      	str	r2, [r5, #0]
 80017a2:	6023      	str	r3, [r4, #0]
 80017a4:	b003      	add	sp, #12
 80017a6:	bd30      	pop	{r4, r5, pc}
 80017a8:	2000000c 	.word	0x2000000c
 80017ac:	20000010 	.word	0x20000010

080017b0 <_has_ext_stdout_stderr>:
 80017b0:	b510      	push	{r4, lr}
 80017b2:	4c04      	ldr	r4, [pc, #16]	; (80017c4 <_has_ext_stdout_stderr+0x14>)
 80017b4:	6822      	ldr	r2, [r4, #0]
 80017b6:	2a00      	cmp	r2, #0
 80017b8:	da01      	bge.n	80017be <_has_ext_stdout_stderr+0xe>
 80017ba:	f7ff ffdf 	bl	800177c <initialise_semihosting_exts>
 80017be:	6820      	ldr	r0, [r4, #0]
 80017c0:	bd10      	pop	{r4, pc}
 80017c2:	bf00      	nop
 80017c4:	20000010 	.word	0x20000010

080017c8 <initialise_monitor_handles>:
 80017c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017cc:	2303      	movs	r3, #3
 80017ce:	2400      	movs	r4, #0
 80017d0:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8001880 <initialise_monitor_handles+0xb8>
 80017d4:	b085      	sub	sp, #20
 80017d6:	f8cd 9004 	str.w	r9, [sp, #4]
 80017da:	f10d 0804 	add.w	r8, sp, #4
 80017de:	9303      	str	r3, [sp, #12]
 80017e0:	2501      	movs	r5, #1
 80017e2:	9402      	str	r4, [sp, #8]
 80017e4:	4628      	mov	r0, r5
 80017e6:	4641      	mov	r1, r8
 80017e8:	beab      	bkpt	0x00ab
 80017ea:	4605      	mov	r5, r0
 80017ec:	4a20      	ldr	r2, [pc, #128]	; (8001870 <initialise_monitor_handles+0xa8>)
 80017ee:	4623      	mov	r3, r4
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295
 80017f4:	4614      	mov	r4, r2
 80017f6:	4e1f      	ldr	r6, [pc, #124]	; (8001874 <initialise_monitor_handles+0xac>)
 80017f8:	6035      	str	r5, [r6, #0]
 80017fa:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 80017fe:	3301      	adds	r3, #1
 8001800:	2b14      	cmp	r3, #20
 8001802:	d1fa      	bne.n	80017fa <initialise_monitor_handles+0x32>
 8001804:	f7ff ffd4 	bl	80017b0 <_has_ext_stdout_stderr>
 8001808:	4d1b      	ldr	r5, [pc, #108]	; (8001878 <initialise_monitor_handles+0xb0>)
 800180a:	b1d0      	cbz	r0, 8001842 <initialise_monitor_handles+0x7a>
 800180c:	f04f 0a03 	mov.w	sl, #3
 8001810:	2304      	movs	r3, #4
 8001812:	f8cd 9004 	str.w	r9, [sp, #4]
 8001816:	2701      	movs	r7, #1
 8001818:	f8cd a00c 	str.w	sl, [sp, #12]
 800181c:	9302      	str	r3, [sp, #8]
 800181e:	4638      	mov	r0, r7
 8001820:	4641      	mov	r1, r8
 8001822:	beab      	bkpt	0x00ab
 8001824:	4683      	mov	fp, r0
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <initialise_monitor_handles+0xb4>)
 8001828:	f8cd 9004 	str.w	r9, [sp, #4]
 800182c:	f8c3 b000 	str.w	fp, [r3]
 8001830:	2308      	movs	r3, #8
 8001832:	f8cd a00c 	str.w	sl, [sp, #12]
 8001836:	9302      	str	r3, [sp, #8]
 8001838:	4638      	mov	r0, r7
 800183a:	4641      	mov	r1, r8
 800183c:	beab      	bkpt	0x00ab
 800183e:	4607      	mov	r7, r0
 8001840:	602f      	str	r7, [r5, #0]
 8001842:	682b      	ldr	r3, [r5, #0]
 8001844:	3301      	adds	r3, #1
 8001846:	bf02      	ittt	eq
 8001848:	4b0c      	ldreq	r3, [pc, #48]	; (800187c <initialise_monitor_handles+0xb4>)
 800184a:	681b      	ldreq	r3, [r3, #0]
 800184c:	602b      	streq	r3, [r5, #0]
 800184e:	6833      	ldr	r3, [r6, #0]
 8001850:	2600      	movs	r6, #0
 8001852:	6023      	str	r3, [r4, #0]
 8001854:	6066      	str	r6, [r4, #4]
 8001856:	f7ff ffab 	bl	80017b0 <_has_ext_stdout_stderr>
 800185a:	b130      	cbz	r0, 800186a <initialise_monitor_handles+0xa2>
 800185c:	4b07      	ldr	r3, [pc, #28]	; (800187c <initialise_monitor_handles+0xb4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8001864:	682b      	ldr	r3, [r5, #0]
 8001866:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800186a:	b005      	add	sp, #20
 800186c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001870:	200000a4 	.word	0x200000a4
 8001874:	2000009c 	.word	0x2000009c
 8001878:	20000098 	.word	0x20000098
 800187c:	200000a0 	.word	0x200000a0
 8001880:	08002316 	.word	0x08002316

08001884 <_isatty>:
 8001884:	b570      	push	{r4, r5, r6, lr}
 8001886:	f7ff fd73 	bl	8001370 <findslot>
 800188a:	2509      	movs	r5, #9
 800188c:	4604      	mov	r4, r0
 800188e:	b920      	cbnz	r0, 800189a <_isatty+0x16>
 8001890:	f000 f814 	bl	80018bc <__errno>
 8001894:	6005      	str	r5, [r0, #0]
 8001896:	4620      	mov	r0, r4
 8001898:	bd70      	pop	{r4, r5, r6, pc}
 800189a:	4628      	mov	r0, r5
 800189c:	4621      	mov	r1, r4
 800189e:	beab      	bkpt	0x00ab
 80018a0:	4604      	mov	r4, r0
 80018a2:	2c01      	cmp	r4, #1
 80018a4:	d0f7      	beq.n	8001896 <_isatty+0x12>
 80018a6:	f000 f809 	bl	80018bc <__errno>
 80018aa:	2400      	movs	r4, #0
 80018ac:	4605      	mov	r5, r0
 80018ae:	2613      	movs	r6, #19
 80018b0:	4630      	mov	r0, r6
 80018b2:	4621      	mov	r1, r4
 80018b4:	beab      	bkpt	0x00ab
 80018b6:	4606      	mov	r6, r0
 80018b8:	602e      	str	r6, [r5, #0]
 80018ba:	e7ec      	b.n	8001896 <_isatty+0x12>

080018bc <__errno>:
 80018bc:	4b01      	ldr	r3, [pc, #4]	; (80018c4 <__errno+0x8>)
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000014 	.word	0x20000014

080018c8 <std>:
 80018c8:	2300      	movs	r3, #0
 80018ca:	b510      	push	{r4, lr}
 80018cc:	4604      	mov	r4, r0
 80018ce:	e9c0 3300 	strd	r3, r3, [r0]
 80018d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80018d6:	6083      	str	r3, [r0, #8]
 80018d8:	8181      	strh	r1, [r0, #12]
 80018da:	6643      	str	r3, [r0, #100]	; 0x64
 80018dc:	81c2      	strh	r2, [r0, #14]
 80018de:	6183      	str	r3, [r0, #24]
 80018e0:	4619      	mov	r1, r3
 80018e2:	2208      	movs	r2, #8
 80018e4:	305c      	adds	r0, #92	; 0x5c
 80018e6:	f000 f90c 	bl	8001b02 <memset>
 80018ea:	4b05      	ldr	r3, [pc, #20]	; (8001900 <std+0x38>)
 80018ec:	6224      	str	r4, [r4, #32]
 80018ee:	6263      	str	r3, [r4, #36]	; 0x24
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <std+0x3c>)
 80018f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <std+0x40>)
 80018f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <std+0x44>)
 80018fa:	6323      	str	r3, [r4, #48]	; 0x30
 80018fc:	bd10      	pop	{r4, pc}
 80018fe:	bf00      	nop
 8001900:	08001cd5 	.word	0x08001cd5
 8001904:	08001cf7 	.word	0x08001cf7
 8001908:	08001d2f 	.word	0x08001d2f
 800190c:	08001d53 	.word	0x08001d53

08001910 <_cleanup_r>:
 8001910:	4901      	ldr	r1, [pc, #4]	; (8001918 <_cleanup_r+0x8>)
 8001912:	f000 b8af 	b.w	8001a74 <_fwalk_reent>
 8001916:	bf00      	nop
 8001918:	0800202d 	.word	0x0800202d

0800191c <__sfmoreglue>:
 800191c:	b570      	push	{r4, r5, r6, lr}
 800191e:	2568      	movs	r5, #104	; 0x68
 8001920:	1e4a      	subs	r2, r1, #1
 8001922:	4355      	muls	r5, r2
 8001924:	460e      	mov	r6, r1
 8001926:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800192a:	f000 f8f3 	bl	8001b14 <_malloc_r>
 800192e:	4604      	mov	r4, r0
 8001930:	b140      	cbz	r0, 8001944 <__sfmoreglue+0x28>
 8001932:	2100      	movs	r1, #0
 8001934:	e9c0 1600 	strd	r1, r6, [r0]
 8001938:	300c      	adds	r0, #12
 800193a:	60a0      	str	r0, [r4, #8]
 800193c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001940:	f000 f8df 	bl	8001b02 <memset>
 8001944:	4620      	mov	r0, r4
 8001946:	bd70      	pop	{r4, r5, r6, pc}

08001948 <__sfp_lock_acquire>:
 8001948:	4801      	ldr	r0, [pc, #4]	; (8001950 <__sfp_lock_acquire+0x8>)
 800194a:	f000 b8d8 	b.w	8001afe <__retarget_lock_acquire_recursive>
 800194e:	bf00      	nop
 8001950:	20000178 	.word	0x20000178

08001954 <__sfp_lock_release>:
 8001954:	4801      	ldr	r0, [pc, #4]	; (800195c <__sfp_lock_release+0x8>)
 8001956:	f000 b8d3 	b.w	8001b00 <__retarget_lock_release_recursive>
 800195a:	bf00      	nop
 800195c:	20000178 	.word	0x20000178

08001960 <__sinit_lock_acquire>:
 8001960:	4801      	ldr	r0, [pc, #4]	; (8001968 <__sinit_lock_acquire+0x8>)
 8001962:	f000 b8cc 	b.w	8001afe <__retarget_lock_acquire_recursive>
 8001966:	bf00      	nop
 8001968:	20000173 	.word	0x20000173

0800196c <__sinit_lock_release>:
 800196c:	4801      	ldr	r0, [pc, #4]	; (8001974 <__sinit_lock_release+0x8>)
 800196e:	f000 b8c7 	b.w	8001b00 <__retarget_lock_release_recursive>
 8001972:	bf00      	nop
 8001974:	20000173 	.word	0x20000173

08001978 <__sinit>:
 8001978:	b510      	push	{r4, lr}
 800197a:	4604      	mov	r4, r0
 800197c:	f7ff fff0 	bl	8001960 <__sinit_lock_acquire>
 8001980:	69a3      	ldr	r3, [r4, #24]
 8001982:	b11b      	cbz	r3, 800198c <__sinit+0x14>
 8001984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001988:	f7ff bff0 	b.w	800196c <__sinit_lock_release>
 800198c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001990:	6523      	str	r3, [r4, #80]	; 0x50
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <__sinit+0x68>)
 8001994:	4a13      	ldr	r2, [pc, #76]	; (80019e4 <__sinit+0x6c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	62a2      	str	r2, [r4, #40]	; 0x28
 800199a:	42a3      	cmp	r3, r4
 800199c:	bf08      	it	eq
 800199e:	2301      	moveq	r3, #1
 80019a0:	4620      	mov	r0, r4
 80019a2:	bf08      	it	eq
 80019a4:	61a3      	streq	r3, [r4, #24]
 80019a6:	f000 f81f 	bl	80019e8 <__sfp>
 80019aa:	6060      	str	r0, [r4, #4]
 80019ac:	4620      	mov	r0, r4
 80019ae:	f000 f81b 	bl	80019e8 <__sfp>
 80019b2:	60a0      	str	r0, [r4, #8]
 80019b4:	4620      	mov	r0, r4
 80019b6:	f000 f817 	bl	80019e8 <__sfp>
 80019ba:	2200      	movs	r2, #0
 80019bc:	2104      	movs	r1, #4
 80019be:	60e0      	str	r0, [r4, #12]
 80019c0:	6860      	ldr	r0, [r4, #4]
 80019c2:	f7ff ff81 	bl	80018c8 <std>
 80019c6:	2201      	movs	r2, #1
 80019c8:	2109      	movs	r1, #9
 80019ca:	68a0      	ldr	r0, [r4, #8]
 80019cc:	f7ff ff7c 	bl	80018c8 <std>
 80019d0:	2202      	movs	r2, #2
 80019d2:	2112      	movs	r1, #18
 80019d4:	68e0      	ldr	r0, [r4, #12]
 80019d6:	f7ff ff77 	bl	80018c8 <std>
 80019da:	2301      	movs	r3, #1
 80019dc:	61a3      	str	r3, [r4, #24]
 80019de:	e7d1      	b.n	8001984 <__sinit+0xc>
 80019e0:	0800237c 	.word	0x0800237c
 80019e4:	08001911 	.word	0x08001911

080019e8 <__sfp>:
 80019e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ea:	4607      	mov	r7, r0
 80019ec:	f7ff ffac 	bl	8001948 <__sfp_lock_acquire>
 80019f0:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <__sfp+0x84>)
 80019f2:	681e      	ldr	r6, [r3, #0]
 80019f4:	69b3      	ldr	r3, [r6, #24]
 80019f6:	b913      	cbnz	r3, 80019fe <__sfp+0x16>
 80019f8:	4630      	mov	r0, r6
 80019fa:	f7ff ffbd 	bl	8001978 <__sinit>
 80019fe:	3648      	adds	r6, #72	; 0x48
 8001a00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	d503      	bpl.n	8001a10 <__sfp+0x28>
 8001a08:	6833      	ldr	r3, [r6, #0]
 8001a0a:	b30b      	cbz	r3, 8001a50 <__sfp+0x68>
 8001a0c:	6836      	ldr	r6, [r6, #0]
 8001a0e:	e7f7      	b.n	8001a00 <__sfp+0x18>
 8001a10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001a14:	b9d5      	cbnz	r5, 8001a4c <__sfp+0x64>
 8001a16:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <__sfp+0x88>)
 8001a18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001a1c:	60e3      	str	r3, [r4, #12]
 8001a1e:	6665      	str	r5, [r4, #100]	; 0x64
 8001a20:	f000 f86c 	bl	8001afc <__retarget_lock_init_recursive>
 8001a24:	f7ff ff96 	bl	8001954 <__sfp_lock_release>
 8001a28:	2208      	movs	r2, #8
 8001a2a:	4629      	mov	r1, r5
 8001a2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001a30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001a34:	6025      	str	r5, [r4, #0]
 8001a36:	61a5      	str	r5, [r4, #24]
 8001a38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001a3c:	f000 f861 	bl	8001b02 <memset>
 8001a40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001a44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001a48:	4620      	mov	r0, r4
 8001a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a4c:	3468      	adds	r4, #104	; 0x68
 8001a4e:	e7d9      	b.n	8001a04 <__sfp+0x1c>
 8001a50:	2104      	movs	r1, #4
 8001a52:	4638      	mov	r0, r7
 8001a54:	f7ff ff62 	bl	800191c <__sfmoreglue>
 8001a58:	4604      	mov	r4, r0
 8001a5a:	6030      	str	r0, [r6, #0]
 8001a5c:	2800      	cmp	r0, #0
 8001a5e:	d1d5      	bne.n	8001a0c <__sfp+0x24>
 8001a60:	f7ff ff78 	bl	8001954 <__sfp_lock_release>
 8001a64:	230c      	movs	r3, #12
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	e7ee      	b.n	8001a48 <__sfp+0x60>
 8001a6a:	bf00      	nop
 8001a6c:	0800237c 	.word	0x0800237c
 8001a70:	ffff0001 	.word	0xffff0001

08001a74 <_fwalk_reent>:
 8001a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a78:	4606      	mov	r6, r0
 8001a7a:	4688      	mov	r8, r1
 8001a7c:	2700      	movs	r7, #0
 8001a7e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001a82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001a86:	f1b9 0901 	subs.w	r9, r9, #1
 8001a8a:	d505      	bpl.n	8001a98 <_fwalk_reent+0x24>
 8001a8c:	6824      	ldr	r4, [r4, #0]
 8001a8e:	2c00      	cmp	r4, #0
 8001a90:	d1f7      	bne.n	8001a82 <_fwalk_reent+0xe>
 8001a92:	4638      	mov	r0, r7
 8001a94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a98:	89ab      	ldrh	r3, [r5, #12]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d907      	bls.n	8001aae <_fwalk_reent+0x3a>
 8001a9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	d003      	beq.n	8001aae <_fwalk_reent+0x3a>
 8001aa6:	4629      	mov	r1, r5
 8001aa8:	4630      	mov	r0, r6
 8001aaa:	47c0      	blx	r8
 8001aac:	4307      	orrs	r7, r0
 8001aae:	3568      	adds	r5, #104	; 0x68
 8001ab0:	e7e9      	b.n	8001a86 <_fwalk_reent+0x12>
	...

08001ab4 <__libc_init_array>:
 8001ab4:	b570      	push	{r4, r5, r6, lr}
 8001ab6:	2600      	movs	r6, #0
 8001ab8:	4d0c      	ldr	r5, [pc, #48]	; (8001aec <__libc_init_array+0x38>)
 8001aba:	4c0d      	ldr	r4, [pc, #52]	; (8001af0 <__libc_init_array+0x3c>)
 8001abc:	1b64      	subs	r4, r4, r5
 8001abe:	10a4      	asrs	r4, r4, #2
 8001ac0:	42a6      	cmp	r6, r4
 8001ac2:	d109      	bne.n	8001ad8 <__libc_init_array+0x24>
 8001ac4:	f000 fbf0 	bl	80022a8 <_init>
 8001ac8:	2600      	movs	r6, #0
 8001aca:	4d0a      	ldr	r5, [pc, #40]	; (8001af4 <__libc_init_array+0x40>)
 8001acc:	4c0a      	ldr	r4, [pc, #40]	; (8001af8 <__libc_init_array+0x44>)
 8001ace:	1b64      	subs	r4, r4, r5
 8001ad0:	10a4      	asrs	r4, r4, #2
 8001ad2:	42a6      	cmp	r6, r4
 8001ad4:	d105      	bne.n	8001ae2 <__libc_init_array+0x2e>
 8001ad6:	bd70      	pop	{r4, r5, r6, pc}
 8001ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001adc:	4798      	blx	r3
 8001ade:	3601      	adds	r6, #1
 8001ae0:	e7ee      	b.n	8001ac0 <__libc_init_array+0xc>
 8001ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ae6:	4798      	blx	r3
 8001ae8:	3601      	adds	r6, #1
 8001aea:	e7f2      	b.n	8001ad2 <__libc_init_array+0x1e>
 8001aec:	08002380 	.word	0x08002380
 8001af0:	08002380 	.word	0x08002380
 8001af4:	08002380 	.word	0x08002380
 8001af8:	08002384 	.word	0x08002384

08001afc <__retarget_lock_init_recursive>:
 8001afc:	4770      	bx	lr

08001afe <__retarget_lock_acquire_recursive>:
 8001afe:	4770      	bx	lr

08001b00 <__retarget_lock_release_recursive>:
 8001b00:	4770      	bx	lr

08001b02 <memset>:
 8001b02:	4603      	mov	r3, r0
 8001b04:	4402      	add	r2, r0
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d100      	bne.n	8001b0c <memset+0xa>
 8001b0a:	4770      	bx	lr
 8001b0c:	f803 1b01 	strb.w	r1, [r3], #1
 8001b10:	e7f9      	b.n	8001b06 <memset+0x4>
	...

08001b14 <_malloc_r>:
 8001b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b16:	1ccd      	adds	r5, r1, #3
 8001b18:	f025 0503 	bic.w	r5, r5, #3
 8001b1c:	3508      	adds	r5, #8
 8001b1e:	2d0c      	cmp	r5, #12
 8001b20:	bf38      	it	cc
 8001b22:	250c      	movcc	r5, #12
 8001b24:	2d00      	cmp	r5, #0
 8001b26:	4606      	mov	r6, r0
 8001b28:	db01      	blt.n	8001b2e <_malloc_r+0x1a>
 8001b2a:	42a9      	cmp	r1, r5
 8001b2c:	d903      	bls.n	8001b36 <_malloc_r+0x22>
 8001b2e:	230c      	movs	r3, #12
 8001b30:	6033      	str	r3, [r6, #0]
 8001b32:	2000      	movs	r0, #0
 8001b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b36:	f000 fb2b 	bl	8002190 <__malloc_lock>
 8001b3a:	4921      	ldr	r1, [pc, #132]	; (8001bc0 <_malloc_r+0xac>)
 8001b3c:	680a      	ldr	r2, [r1, #0]
 8001b3e:	4614      	mov	r4, r2
 8001b40:	b99c      	cbnz	r4, 8001b6a <_malloc_r+0x56>
 8001b42:	4f20      	ldr	r7, [pc, #128]	; (8001bc4 <_malloc_r+0xb0>)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	b923      	cbnz	r3, 8001b52 <_malloc_r+0x3e>
 8001b48:	4621      	mov	r1, r4
 8001b4a:	4630      	mov	r0, r6
 8001b4c:	f000 f8b2 	bl	8001cb4 <_sbrk_r>
 8001b50:	6038      	str	r0, [r7, #0]
 8001b52:	4629      	mov	r1, r5
 8001b54:	4630      	mov	r0, r6
 8001b56:	f000 f8ad 	bl	8001cb4 <_sbrk_r>
 8001b5a:	1c43      	adds	r3, r0, #1
 8001b5c:	d123      	bne.n	8001ba6 <_malloc_r+0x92>
 8001b5e:	230c      	movs	r3, #12
 8001b60:	4630      	mov	r0, r6
 8001b62:	6033      	str	r3, [r6, #0]
 8001b64:	f000 fb1a 	bl	800219c <__malloc_unlock>
 8001b68:	e7e3      	b.n	8001b32 <_malloc_r+0x1e>
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	1b5b      	subs	r3, r3, r5
 8001b6e:	d417      	bmi.n	8001ba0 <_malloc_r+0x8c>
 8001b70:	2b0b      	cmp	r3, #11
 8001b72:	d903      	bls.n	8001b7c <_malloc_r+0x68>
 8001b74:	6023      	str	r3, [r4, #0]
 8001b76:	441c      	add	r4, r3
 8001b78:	6025      	str	r5, [r4, #0]
 8001b7a:	e004      	b.n	8001b86 <_malloc_r+0x72>
 8001b7c:	6863      	ldr	r3, [r4, #4]
 8001b7e:	42a2      	cmp	r2, r4
 8001b80:	bf0c      	ite	eq
 8001b82:	600b      	streq	r3, [r1, #0]
 8001b84:	6053      	strne	r3, [r2, #4]
 8001b86:	4630      	mov	r0, r6
 8001b88:	f000 fb08 	bl	800219c <__malloc_unlock>
 8001b8c:	f104 000b 	add.w	r0, r4, #11
 8001b90:	1d23      	adds	r3, r4, #4
 8001b92:	f020 0007 	bic.w	r0, r0, #7
 8001b96:	1ac2      	subs	r2, r0, r3
 8001b98:	d0cc      	beq.n	8001b34 <_malloc_r+0x20>
 8001b9a:	1a1b      	subs	r3, r3, r0
 8001b9c:	50a3      	str	r3, [r4, r2]
 8001b9e:	e7c9      	b.n	8001b34 <_malloc_r+0x20>
 8001ba0:	4622      	mov	r2, r4
 8001ba2:	6864      	ldr	r4, [r4, #4]
 8001ba4:	e7cc      	b.n	8001b40 <_malloc_r+0x2c>
 8001ba6:	1cc4      	adds	r4, r0, #3
 8001ba8:	f024 0403 	bic.w	r4, r4, #3
 8001bac:	42a0      	cmp	r0, r4
 8001bae:	d0e3      	beq.n	8001b78 <_malloc_r+0x64>
 8001bb0:	1a21      	subs	r1, r4, r0
 8001bb2:	4630      	mov	r0, r6
 8001bb4:	f000 f87e 	bl	8001cb4 <_sbrk_r>
 8001bb8:	3001      	adds	r0, #1
 8001bba:	d1dd      	bne.n	8001b78 <_malloc_r+0x64>
 8001bbc:	e7cf      	b.n	8001b5e <_malloc_r+0x4a>
 8001bbe:	bf00      	nop
 8001bc0:	20000144 	.word	0x20000144
 8001bc4:	20000148 	.word	0x20000148

08001bc8 <_puts_r>:
 8001bc8:	b570      	push	{r4, r5, r6, lr}
 8001bca:	460e      	mov	r6, r1
 8001bcc:	4605      	mov	r5, r0
 8001bce:	b118      	cbz	r0, 8001bd8 <_puts_r+0x10>
 8001bd0:	6983      	ldr	r3, [r0, #24]
 8001bd2:	b90b      	cbnz	r3, 8001bd8 <_puts_r+0x10>
 8001bd4:	f7ff fed0 	bl	8001978 <__sinit>
 8001bd8:	69ab      	ldr	r3, [r5, #24]
 8001bda:	68ac      	ldr	r4, [r5, #8]
 8001bdc:	b913      	cbnz	r3, 8001be4 <_puts_r+0x1c>
 8001bde:	4628      	mov	r0, r5
 8001be0:	f7ff feca 	bl	8001978 <__sinit>
 8001be4:	4b2c      	ldr	r3, [pc, #176]	; (8001c98 <_puts_r+0xd0>)
 8001be6:	429c      	cmp	r4, r3
 8001be8:	d120      	bne.n	8001c2c <_puts_r+0x64>
 8001bea:	686c      	ldr	r4, [r5, #4]
 8001bec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001bee:	07db      	lsls	r3, r3, #31
 8001bf0:	d405      	bmi.n	8001bfe <_puts_r+0x36>
 8001bf2:	89a3      	ldrh	r3, [r4, #12]
 8001bf4:	0598      	lsls	r0, r3, #22
 8001bf6:	d402      	bmi.n	8001bfe <_puts_r+0x36>
 8001bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001bfa:	f7ff ff80 	bl	8001afe <__retarget_lock_acquire_recursive>
 8001bfe:	89a3      	ldrh	r3, [r4, #12]
 8001c00:	0719      	lsls	r1, r3, #28
 8001c02:	d51d      	bpl.n	8001c40 <_puts_r+0x78>
 8001c04:	6923      	ldr	r3, [r4, #16]
 8001c06:	b1db      	cbz	r3, 8001c40 <_puts_r+0x78>
 8001c08:	3e01      	subs	r6, #1
 8001c0a:	68a3      	ldr	r3, [r4, #8]
 8001c0c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001c10:	3b01      	subs	r3, #1
 8001c12:	60a3      	str	r3, [r4, #8]
 8001c14:	bb39      	cbnz	r1, 8001c66 <_puts_r+0x9e>
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	da38      	bge.n	8001c8c <_puts_r+0xc4>
 8001c1a:	4622      	mov	r2, r4
 8001c1c:	210a      	movs	r1, #10
 8001c1e:	4628      	mov	r0, r5
 8001c20:	f000 f89c 	bl	8001d5c <__swbuf_r>
 8001c24:	3001      	adds	r0, #1
 8001c26:	d011      	beq.n	8001c4c <_puts_r+0x84>
 8001c28:	250a      	movs	r5, #10
 8001c2a:	e011      	b.n	8001c50 <_puts_r+0x88>
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <_puts_r+0xd4>)
 8001c2e:	429c      	cmp	r4, r3
 8001c30:	d101      	bne.n	8001c36 <_puts_r+0x6e>
 8001c32:	68ac      	ldr	r4, [r5, #8]
 8001c34:	e7da      	b.n	8001bec <_puts_r+0x24>
 8001c36:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <_puts_r+0xd8>)
 8001c38:	429c      	cmp	r4, r3
 8001c3a:	bf08      	it	eq
 8001c3c:	68ec      	ldreq	r4, [r5, #12]
 8001c3e:	e7d5      	b.n	8001bec <_puts_r+0x24>
 8001c40:	4621      	mov	r1, r4
 8001c42:	4628      	mov	r0, r5
 8001c44:	f000 f8ee 	bl	8001e24 <__swsetup_r>
 8001c48:	2800      	cmp	r0, #0
 8001c4a:	d0dd      	beq.n	8001c08 <_puts_r+0x40>
 8001c4c:	f04f 35ff 	mov.w	r5, #4294967295
 8001c50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001c52:	07da      	lsls	r2, r3, #31
 8001c54:	d405      	bmi.n	8001c62 <_puts_r+0x9a>
 8001c56:	89a3      	ldrh	r3, [r4, #12]
 8001c58:	059b      	lsls	r3, r3, #22
 8001c5a:	d402      	bmi.n	8001c62 <_puts_r+0x9a>
 8001c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c5e:	f7ff ff4f 	bl	8001b00 <__retarget_lock_release_recursive>
 8001c62:	4628      	mov	r0, r5
 8001c64:	bd70      	pop	{r4, r5, r6, pc}
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	da04      	bge.n	8001c74 <_puts_r+0xac>
 8001c6a:	69a2      	ldr	r2, [r4, #24]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	dc06      	bgt.n	8001c7e <_puts_r+0xb6>
 8001c70:	290a      	cmp	r1, #10
 8001c72:	d004      	beq.n	8001c7e <_puts_r+0xb6>
 8001c74:	6823      	ldr	r3, [r4, #0]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	6022      	str	r2, [r4, #0]
 8001c7a:	7019      	strb	r1, [r3, #0]
 8001c7c:	e7c5      	b.n	8001c0a <_puts_r+0x42>
 8001c7e:	4622      	mov	r2, r4
 8001c80:	4628      	mov	r0, r5
 8001c82:	f000 f86b 	bl	8001d5c <__swbuf_r>
 8001c86:	3001      	adds	r0, #1
 8001c88:	d1bf      	bne.n	8001c0a <_puts_r+0x42>
 8001c8a:	e7df      	b.n	8001c4c <_puts_r+0x84>
 8001c8c:	250a      	movs	r5, #10
 8001c8e:	6823      	ldr	r3, [r4, #0]
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	6022      	str	r2, [r4, #0]
 8001c94:	701d      	strb	r5, [r3, #0]
 8001c96:	e7db      	b.n	8001c50 <_puts_r+0x88>
 8001c98:	0800233c 	.word	0x0800233c
 8001c9c:	0800235c 	.word	0x0800235c
 8001ca0:	0800231c 	.word	0x0800231c

08001ca4 <puts>:
 8001ca4:	4b02      	ldr	r3, [pc, #8]	; (8001cb0 <puts+0xc>)
 8001ca6:	4601      	mov	r1, r0
 8001ca8:	6818      	ldr	r0, [r3, #0]
 8001caa:	f7ff bf8d 	b.w	8001bc8 <_puts_r>
 8001cae:	bf00      	nop
 8001cb0:	20000014 	.word	0x20000014

08001cb4 <_sbrk_r>:
 8001cb4:	b538      	push	{r3, r4, r5, lr}
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	4d05      	ldr	r5, [pc, #20]	; (8001cd0 <_sbrk_r+0x1c>)
 8001cba:	4604      	mov	r4, r0
 8001cbc:	4608      	mov	r0, r1
 8001cbe:	602b      	str	r3, [r5, #0]
 8001cc0:	f7fe fb98 	bl	80003f4 <_sbrk>
 8001cc4:	1c43      	adds	r3, r0, #1
 8001cc6:	d102      	bne.n	8001cce <_sbrk_r+0x1a>
 8001cc8:	682b      	ldr	r3, [r5, #0]
 8001cca:	b103      	cbz	r3, 8001cce <_sbrk_r+0x1a>
 8001ccc:	6023      	str	r3, [r4, #0]
 8001cce:	bd38      	pop	{r3, r4, r5, pc}
 8001cd0:	2000017c 	.word	0x2000017c

08001cd4 <__sread>:
 8001cd4:	b510      	push	{r4, lr}
 8001cd6:	460c      	mov	r4, r1
 8001cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cdc:	f000 fab0 	bl	8002240 <_read_r>
 8001ce0:	2800      	cmp	r0, #0
 8001ce2:	bfab      	itete	ge
 8001ce4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001ce6:	89a3      	ldrhlt	r3, [r4, #12]
 8001ce8:	181b      	addge	r3, r3, r0
 8001cea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001cee:	bfac      	ite	ge
 8001cf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8001cf2:	81a3      	strhlt	r3, [r4, #12]
 8001cf4:	bd10      	pop	{r4, pc}

08001cf6 <__swrite>:
 8001cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cfa:	461f      	mov	r7, r3
 8001cfc:	898b      	ldrh	r3, [r1, #12]
 8001cfe:	4605      	mov	r5, r0
 8001d00:	05db      	lsls	r3, r3, #23
 8001d02:	460c      	mov	r4, r1
 8001d04:	4616      	mov	r6, r2
 8001d06:	d505      	bpl.n	8001d14 <__swrite+0x1e>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d10:	f000 f9c8 	bl	80020a4 <_lseek_r>
 8001d14:	89a3      	ldrh	r3, [r4, #12]
 8001d16:	4632      	mov	r2, r6
 8001d18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d1c:	81a3      	strh	r3, [r4, #12]
 8001d1e:	4628      	mov	r0, r5
 8001d20:	463b      	mov	r3, r7
 8001d22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d2a:	f000 b869 	b.w	8001e00 <_write_r>

08001d2e <__sseek>:
 8001d2e:	b510      	push	{r4, lr}
 8001d30:	460c      	mov	r4, r1
 8001d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d36:	f000 f9b5 	bl	80020a4 <_lseek_r>
 8001d3a:	1c43      	adds	r3, r0, #1
 8001d3c:	89a3      	ldrh	r3, [r4, #12]
 8001d3e:	bf15      	itete	ne
 8001d40:	6560      	strne	r0, [r4, #84]	; 0x54
 8001d42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001d46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001d4a:	81a3      	strheq	r3, [r4, #12]
 8001d4c:	bf18      	it	ne
 8001d4e:	81a3      	strhne	r3, [r4, #12]
 8001d50:	bd10      	pop	{r4, pc}

08001d52 <__sclose>:
 8001d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d56:	f000 b8d3 	b.w	8001f00 <_close_r>
	...

08001d5c <__swbuf_r>:
 8001d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d5e:	460e      	mov	r6, r1
 8001d60:	4614      	mov	r4, r2
 8001d62:	4605      	mov	r5, r0
 8001d64:	b118      	cbz	r0, 8001d6e <__swbuf_r+0x12>
 8001d66:	6983      	ldr	r3, [r0, #24]
 8001d68:	b90b      	cbnz	r3, 8001d6e <__swbuf_r+0x12>
 8001d6a:	f7ff fe05 	bl	8001978 <__sinit>
 8001d6e:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <__swbuf_r+0x98>)
 8001d70:	429c      	cmp	r4, r3
 8001d72:	d12b      	bne.n	8001dcc <__swbuf_r+0x70>
 8001d74:	686c      	ldr	r4, [r5, #4]
 8001d76:	69a3      	ldr	r3, [r4, #24]
 8001d78:	60a3      	str	r3, [r4, #8]
 8001d7a:	89a3      	ldrh	r3, [r4, #12]
 8001d7c:	071a      	lsls	r2, r3, #28
 8001d7e:	d52f      	bpl.n	8001de0 <__swbuf_r+0x84>
 8001d80:	6923      	ldr	r3, [r4, #16]
 8001d82:	b36b      	cbz	r3, 8001de0 <__swbuf_r+0x84>
 8001d84:	6923      	ldr	r3, [r4, #16]
 8001d86:	6820      	ldr	r0, [r4, #0]
 8001d88:	b2f6      	uxtb	r6, r6
 8001d8a:	1ac0      	subs	r0, r0, r3
 8001d8c:	6963      	ldr	r3, [r4, #20]
 8001d8e:	4637      	mov	r7, r6
 8001d90:	4283      	cmp	r3, r0
 8001d92:	dc04      	bgt.n	8001d9e <__swbuf_r+0x42>
 8001d94:	4621      	mov	r1, r4
 8001d96:	4628      	mov	r0, r5
 8001d98:	f000 f948 	bl	800202c <_fflush_r>
 8001d9c:	bb30      	cbnz	r0, 8001dec <__swbuf_r+0x90>
 8001d9e:	68a3      	ldr	r3, [r4, #8]
 8001da0:	3001      	adds	r0, #1
 8001da2:	3b01      	subs	r3, #1
 8001da4:	60a3      	str	r3, [r4, #8]
 8001da6:	6823      	ldr	r3, [r4, #0]
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	6022      	str	r2, [r4, #0]
 8001dac:	701e      	strb	r6, [r3, #0]
 8001dae:	6963      	ldr	r3, [r4, #20]
 8001db0:	4283      	cmp	r3, r0
 8001db2:	d004      	beq.n	8001dbe <__swbuf_r+0x62>
 8001db4:	89a3      	ldrh	r3, [r4, #12]
 8001db6:	07db      	lsls	r3, r3, #31
 8001db8:	d506      	bpl.n	8001dc8 <__swbuf_r+0x6c>
 8001dba:	2e0a      	cmp	r6, #10
 8001dbc:	d104      	bne.n	8001dc8 <__swbuf_r+0x6c>
 8001dbe:	4621      	mov	r1, r4
 8001dc0:	4628      	mov	r0, r5
 8001dc2:	f000 f933 	bl	800202c <_fflush_r>
 8001dc6:	b988      	cbnz	r0, 8001dec <__swbuf_r+0x90>
 8001dc8:	4638      	mov	r0, r7
 8001dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <__swbuf_r+0x9c>)
 8001dce:	429c      	cmp	r4, r3
 8001dd0:	d101      	bne.n	8001dd6 <__swbuf_r+0x7a>
 8001dd2:	68ac      	ldr	r4, [r5, #8]
 8001dd4:	e7cf      	b.n	8001d76 <__swbuf_r+0x1a>
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <__swbuf_r+0xa0>)
 8001dd8:	429c      	cmp	r4, r3
 8001dda:	bf08      	it	eq
 8001ddc:	68ec      	ldreq	r4, [r5, #12]
 8001dde:	e7ca      	b.n	8001d76 <__swbuf_r+0x1a>
 8001de0:	4621      	mov	r1, r4
 8001de2:	4628      	mov	r0, r5
 8001de4:	f000 f81e 	bl	8001e24 <__swsetup_r>
 8001de8:	2800      	cmp	r0, #0
 8001dea:	d0cb      	beq.n	8001d84 <__swbuf_r+0x28>
 8001dec:	f04f 37ff 	mov.w	r7, #4294967295
 8001df0:	e7ea      	b.n	8001dc8 <__swbuf_r+0x6c>
 8001df2:	bf00      	nop
 8001df4:	0800233c 	.word	0x0800233c
 8001df8:	0800235c 	.word	0x0800235c
 8001dfc:	0800231c 	.word	0x0800231c

08001e00 <_write_r>:
 8001e00:	b538      	push	{r3, r4, r5, lr}
 8001e02:	4604      	mov	r4, r0
 8001e04:	4608      	mov	r0, r1
 8001e06:	4611      	mov	r1, r2
 8001e08:	2200      	movs	r2, #0
 8001e0a:	4d05      	ldr	r5, [pc, #20]	; (8001e20 <_write_r+0x20>)
 8001e0c:	602a      	str	r2, [r5, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f7ff fb5e 	bl	80014d0 <_write>
 8001e14:	1c43      	adds	r3, r0, #1
 8001e16:	d102      	bne.n	8001e1e <_write_r+0x1e>
 8001e18:	682b      	ldr	r3, [r5, #0]
 8001e1a:	b103      	cbz	r3, 8001e1e <_write_r+0x1e>
 8001e1c:	6023      	str	r3, [r4, #0]
 8001e1e:	bd38      	pop	{r3, r4, r5, pc}
 8001e20:	2000017c 	.word	0x2000017c

08001e24 <__swsetup_r>:
 8001e24:	4b32      	ldr	r3, [pc, #200]	; (8001ef0 <__swsetup_r+0xcc>)
 8001e26:	b570      	push	{r4, r5, r6, lr}
 8001e28:	681d      	ldr	r5, [r3, #0]
 8001e2a:	4606      	mov	r6, r0
 8001e2c:	460c      	mov	r4, r1
 8001e2e:	b125      	cbz	r5, 8001e3a <__swsetup_r+0x16>
 8001e30:	69ab      	ldr	r3, [r5, #24]
 8001e32:	b913      	cbnz	r3, 8001e3a <__swsetup_r+0x16>
 8001e34:	4628      	mov	r0, r5
 8001e36:	f7ff fd9f 	bl	8001978 <__sinit>
 8001e3a:	4b2e      	ldr	r3, [pc, #184]	; (8001ef4 <__swsetup_r+0xd0>)
 8001e3c:	429c      	cmp	r4, r3
 8001e3e:	d10f      	bne.n	8001e60 <__swsetup_r+0x3c>
 8001e40:	686c      	ldr	r4, [r5, #4]
 8001e42:	89a3      	ldrh	r3, [r4, #12]
 8001e44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e48:	0719      	lsls	r1, r3, #28
 8001e4a:	d42c      	bmi.n	8001ea6 <__swsetup_r+0x82>
 8001e4c:	06dd      	lsls	r5, r3, #27
 8001e4e:	d411      	bmi.n	8001e74 <__swsetup_r+0x50>
 8001e50:	2309      	movs	r3, #9
 8001e52:	6033      	str	r3, [r6, #0]
 8001e54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295
 8001e5c:	81a3      	strh	r3, [r4, #12]
 8001e5e:	e03e      	b.n	8001ede <__swsetup_r+0xba>
 8001e60:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <__swsetup_r+0xd4>)
 8001e62:	429c      	cmp	r4, r3
 8001e64:	d101      	bne.n	8001e6a <__swsetup_r+0x46>
 8001e66:	68ac      	ldr	r4, [r5, #8]
 8001e68:	e7eb      	b.n	8001e42 <__swsetup_r+0x1e>
 8001e6a:	4b24      	ldr	r3, [pc, #144]	; (8001efc <__swsetup_r+0xd8>)
 8001e6c:	429c      	cmp	r4, r3
 8001e6e:	bf08      	it	eq
 8001e70:	68ec      	ldreq	r4, [r5, #12]
 8001e72:	e7e6      	b.n	8001e42 <__swsetup_r+0x1e>
 8001e74:	0758      	lsls	r0, r3, #29
 8001e76:	d512      	bpl.n	8001e9e <__swsetup_r+0x7a>
 8001e78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e7a:	b141      	cbz	r1, 8001e8e <__swsetup_r+0x6a>
 8001e7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e80:	4299      	cmp	r1, r3
 8001e82:	d002      	beq.n	8001e8a <__swsetup_r+0x66>
 8001e84:	4630      	mov	r0, r6
 8001e86:	f000 f98f 	bl	80021a8 <_free_r>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	6363      	str	r3, [r4, #52]	; 0x34
 8001e8e:	89a3      	ldrh	r3, [r4, #12]
 8001e90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001e94:	81a3      	strh	r3, [r4, #12]
 8001e96:	2300      	movs	r3, #0
 8001e98:	6063      	str	r3, [r4, #4]
 8001e9a:	6923      	ldr	r3, [r4, #16]
 8001e9c:	6023      	str	r3, [r4, #0]
 8001e9e:	89a3      	ldrh	r3, [r4, #12]
 8001ea0:	f043 0308 	orr.w	r3, r3, #8
 8001ea4:	81a3      	strh	r3, [r4, #12]
 8001ea6:	6923      	ldr	r3, [r4, #16]
 8001ea8:	b94b      	cbnz	r3, 8001ebe <__swsetup_r+0x9a>
 8001eaa:	89a3      	ldrh	r3, [r4, #12]
 8001eac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eb4:	d003      	beq.n	8001ebe <__swsetup_r+0x9a>
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	4630      	mov	r0, r6
 8001eba:	f000 f929 	bl	8002110 <__smakebuf_r>
 8001ebe:	89a0      	ldrh	r0, [r4, #12]
 8001ec0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001ec4:	f010 0301 	ands.w	r3, r0, #1
 8001ec8:	d00a      	beq.n	8001ee0 <__swsetup_r+0xbc>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60a3      	str	r3, [r4, #8]
 8001ece:	6963      	ldr	r3, [r4, #20]
 8001ed0:	425b      	negs	r3, r3
 8001ed2:	61a3      	str	r3, [r4, #24]
 8001ed4:	6923      	ldr	r3, [r4, #16]
 8001ed6:	b943      	cbnz	r3, 8001eea <__swsetup_r+0xc6>
 8001ed8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001edc:	d1ba      	bne.n	8001e54 <__swsetup_r+0x30>
 8001ede:	bd70      	pop	{r4, r5, r6, pc}
 8001ee0:	0781      	lsls	r1, r0, #30
 8001ee2:	bf58      	it	pl
 8001ee4:	6963      	ldrpl	r3, [r4, #20]
 8001ee6:	60a3      	str	r3, [r4, #8]
 8001ee8:	e7f4      	b.n	8001ed4 <__swsetup_r+0xb0>
 8001eea:	2000      	movs	r0, #0
 8001eec:	e7f7      	b.n	8001ede <__swsetup_r+0xba>
 8001eee:	bf00      	nop
 8001ef0:	20000014 	.word	0x20000014
 8001ef4:	0800233c 	.word	0x0800233c
 8001ef8:	0800235c 	.word	0x0800235c
 8001efc:	0800231c 	.word	0x0800231c

08001f00 <_close_r>:
 8001f00:	b538      	push	{r3, r4, r5, lr}
 8001f02:	2300      	movs	r3, #0
 8001f04:	4d05      	ldr	r5, [pc, #20]	; (8001f1c <_close_r+0x1c>)
 8001f06:	4604      	mov	r4, r0
 8001f08:	4608      	mov	r0, r1
 8001f0a:	602b      	str	r3, [r5, #0]
 8001f0c:	f7ff fb0e 	bl	800152c <_close>
 8001f10:	1c43      	adds	r3, r0, #1
 8001f12:	d102      	bne.n	8001f1a <_close_r+0x1a>
 8001f14:	682b      	ldr	r3, [r5, #0]
 8001f16:	b103      	cbz	r3, 8001f1a <_close_r+0x1a>
 8001f18:	6023      	str	r3, [r4, #0]
 8001f1a:	bd38      	pop	{r3, r4, r5, pc}
 8001f1c:	2000017c 	.word	0x2000017c

08001f20 <__sflush_r>:
 8001f20:	898a      	ldrh	r2, [r1, #12]
 8001f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f26:	4605      	mov	r5, r0
 8001f28:	0710      	lsls	r0, r2, #28
 8001f2a:	460c      	mov	r4, r1
 8001f2c:	d458      	bmi.n	8001fe0 <__sflush_r+0xc0>
 8001f2e:	684b      	ldr	r3, [r1, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	dc05      	bgt.n	8001f40 <__sflush_r+0x20>
 8001f34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	dc02      	bgt.n	8001f40 <__sflush_r+0x20>
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f42:	2e00      	cmp	r6, #0
 8001f44:	d0f9      	beq.n	8001f3a <__sflush_r+0x1a>
 8001f46:	2300      	movs	r3, #0
 8001f48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001f4c:	682f      	ldr	r7, [r5, #0]
 8001f4e:	602b      	str	r3, [r5, #0]
 8001f50:	d032      	beq.n	8001fb8 <__sflush_r+0x98>
 8001f52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f54:	89a3      	ldrh	r3, [r4, #12]
 8001f56:	075a      	lsls	r2, r3, #29
 8001f58:	d505      	bpl.n	8001f66 <__sflush_r+0x46>
 8001f5a:	6863      	ldr	r3, [r4, #4]
 8001f5c:	1ac0      	subs	r0, r0, r3
 8001f5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f60:	b10b      	cbz	r3, 8001f66 <__sflush_r+0x46>
 8001f62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f64:	1ac0      	subs	r0, r0, r3
 8001f66:	2300      	movs	r3, #0
 8001f68:	4602      	mov	r2, r0
 8001f6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f6c:	4628      	mov	r0, r5
 8001f6e:	6a21      	ldr	r1, [r4, #32]
 8001f70:	47b0      	blx	r6
 8001f72:	1c43      	adds	r3, r0, #1
 8001f74:	89a3      	ldrh	r3, [r4, #12]
 8001f76:	d106      	bne.n	8001f86 <__sflush_r+0x66>
 8001f78:	6829      	ldr	r1, [r5, #0]
 8001f7a:	291d      	cmp	r1, #29
 8001f7c:	d82c      	bhi.n	8001fd8 <__sflush_r+0xb8>
 8001f7e:	4a2a      	ldr	r2, [pc, #168]	; (8002028 <__sflush_r+0x108>)
 8001f80:	40ca      	lsrs	r2, r1
 8001f82:	07d6      	lsls	r6, r2, #31
 8001f84:	d528      	bpl.n	8001fd8 <__sflush_r+0xb8>
 8001f86:	2200      	movs	r2, #0
 8001f88:	6062      	str	r2, [r4, #4]
 8001f8a:	6922      	ldr	r2, [r4, #16]
 8001f8c:	04d9      	lsls	r1, r3, #19
 8001f8e:	6022      	str	r2, [r4, #0]
 8001f90:	d504      	bpl.n	8001f9c <__sflush_r+0x7c>
 8001f92:	1c42      	adds	r2, r0, #1
 8001f94:	d101      	bne.n	8001f9a <__sflush_r+0x7a>
 8001f96:	682b      	ldr	r3, [r5, #0]
 8001f98:	b903      	cbnz	r3, 8001f9c <__sflush_r+0x7c>
 8001f9a:	6560      	str	r0, [r4, #84]	; 0x54
 8001f9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f9e:	602f      	str	r7, [r5, #0]
 8001fa0:	2900      	cmp	r1, #0
 8001fa2:	d0ca      	beq.n	8001f3a <__sflush_r+0x1a>
 8001fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001fa8:	4299      	cmp	r1, r3
 8001faa:	d002      	beq.n	8001fb2 <__sflush_r+0x92>
 8001fac:	4628      	mov	r0, r5
 8001fae:	f000 f8fb 	bl	80021a8 <_free_r>
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	6360      	str	r0, [r4, #52]	; 0x34
 8001fb6:	e7c1      	b.n	8001f3c <__sflush_r+0x1c>
 8001fb8:	6a21      	ldr	r1, [r4, #32]
 8001fba:	2301      	movs	r3, #1
 8001fbc:	4628      	mov	r0, r5
 8001fbe:	47b0      	blx	r6
 8001fc0:	1c41      	adds	r1, r0, #1
 8001fc2:	d1c7      	bne.n	8001f54 <__sflush_r+0x34>
 8001fc4:	682b      	ldr	r3, [r5, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0c4      	beq.n	8001f54 <__sflush_r+0x34>
 8001fca:	2b1d      	cmp	r3, #29
 8001fcc:	d001      	beq.n	8001fd2 <__sflush_r+0xb2>
 8001fce:	2b16      	cmp	r3, #22
 8001fd0:	d101      	bne.n	8001fd6 <__sflush_r+0xb6>
 8001fd2:	602f      	str	r7, [r5, #0]
 8001fd4:	e7b1      	b.n	8001f3a <__sflush_r+0x1a>
 8001fd6:	89a3      	ldrh	r3, [r4, #12]
 8001fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fdc:	81a3      	strh	r3, [r4, #12]
 8001fde:	e7ad      	b.n	8001f3c <__sflush_r+0x1c>
 8001fe0:	690f      	ldr	r7, [r1, #16]
 8001fe2:	2f00      	cmp	r7, #0
 8001fe4:	d0a9      	beq.n	8001f3a <__sflush_r+0x1a>
 8001fe6:	0793      	lsls	r3, r2, #30
 8001fe8:	bf18      	it	ne
 8001fea:	2300      	movne	r3, #0
 8001fec:	680e      	ldr	r6, [r1, #0]
 8001fee:	bf08      	it	eq
 8001ff0:	694b      	ldreq	r3, [r1, #20]
 8001ff2:	eba6 0807 	sub.w	r8, r6, r7
 8001ff6:	600f      	str	r7, [r1, #0]
 8001ff8:	608b      	str	r3, [r1, #8]
 8001ffa:	f1b8 0f00 	cmp.w	r8, #0
 8001ffe:	dd9c      	ble.n	8001f3a <__sflush_r+0x1a>
 8002000:	4643      	mov	r3, r8
 8002002:	463a      	mov	r2, r7
 8002004:	4628      	mov	r0, r5
 8002006:	6a21      	ldr	r1, [r4, #32]
 8002008:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800200a:	47b0      	blx	r6
 800200c:	2800      	cmp	r0, #0
 800200e:	dc06      	bgt.n	800201e <__sflush_r+0xfe>
 8002010:	89a3      	ldrh	r3, [r4, #12]
 8002012:	f04f 30ff 	mov.w	r0, #4294967295
 8002016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800201a:	81a3      	strh	r3, [r4, #12]
 800201c:	e78e      	b.n	8001f3c <__sflush_r+0x1c>
 800201e:	4407      	add	r7, r0
 8002020:	eba8 0800 	sub.w	r8, r8, r0
 8002024:	e7e9      	b.n	8001ffa <__sflush_r+0xda>
 8002026:	bf00      	nop
 8002028:	20400001 	.word	0x20400001

0800202c <_fflush_r>:
 800202c:	b538      	push	{r3, r4, r5, lr}
 800202e:	690b      	ldr	r3, [r1, #16]
 8002030:	4605      	mov	r5, r0
 8002032:	460c      	mov	r4, r1
 8002034:	b913      	cbnz	r3, 800203c <_fflush_r+0x10>
 8002036:	2500      	movs	r5, #0
 8002038:	4628      	mov	r0, r5
 800203a:	bd38      	pop	{r3, r4, r5, pc}
 800203c:	b118      	cbz	r0, 8002046 <_fflush_r+0x1a>
 800203e:	6983      	ldr	r3, [r0, #24]
 8002040:	b90b      	cbnz	r3, 8002046 <_fflush_r+0x1a>
 8002042:	f7ff fc99 	bl	8001978 <__sinit>
 8002046:	4b14      	ldr	r3, [pc, #80]	; (8002098 <_fflush_r+0x6c>)
 8002048:	429c      	cmp	r4, r3
 800204a:	d11b      	bne.n	8002084 <_fflush_r+0x58>
 800204c:	686c      	ldr	r4, [r5, #4]
 800204e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0ef      	beq.n	8002036 <_fflush_r+0xa>
 8002056:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002058:	07d0      	lsls	r0, r2, #31
 800205a:	d404      	bmi.n	8002066 <_fflush_r+0x3a>
 800205c:	0599      	lsls	r1, r3, #22
 800205e:	d402      	bmi.n	8002066 <_fflush_r+0x3a>
 8002060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002062:	f7ff fd4c 	bl	8001afe <__retarget_lock_acquire_recursive>
 8002066:	4628      	mov	r0, r5
 8002068:	4621      	mov	r1, r4
 800206a:	f7ff ff59 	bl	8001f20 <__sflush_r>
 800206e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002070:	4605      	mov	r5, r0
 8002072:	07da      	lsls	r2, r3, #31
 8002074:	d4e0      	bmi.n	8002038 <_fflush_r+0xc>
 8002076:	89a3      	ldrh	r3, [r4, #12]
 8002078:	059b      	lsls	r3, r3, #22
 800207a:	d4dd      	bmi.n	8002038 <_fflush_r+0xc>
 800207c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800207e:	f7ff fd3f 	bl	8001b00 <__retarget_lock_release_recursive>
 8002082:	e7d9      	b.n	8002038 <_fflush_r+0xc>
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <_fflush_r+0x70>)
 8002086:	429c      	cmp	r4, r3
 8002088:	d101      	bne.n	800208e <_fflush_r+0x62>
 800208a:	68ac      	ldr	r4, [r5, #8]
 800208c:	e7df      	b.n	800204e <_fflush_r+0x22>
 800208e:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <_fflush_r+0x74>)
 8002090:	429c      	cmp	r4, r3
 8002092:	bf08      	it	eq
 8002094:	68ec      	ldreq	r4, [r5, #12]
 8002096:	e7da      	b.n	800204e <_fflush_r+0x22>
 8002098:	0800233c 	.word	0x0800233c
 800209c:	0800235c 	.word	0x0800235c
 80020a0:	0800231c 	.word	0x0800231c

080020a4 <_lseek_r>:
 80020a4:	b538      	push	{r3, r4, r5, lr}
 80020a6:	4604      	mov	r4, r0
 80020a8:	4608      	mov	r0, r1
 80020aa:	4611      	mov	r1, r2
 80020ac:	2200      	movs	r2, #0
 80020ae:	4d05      	ldr	r5, [pc, #20]	; (80020c4 <_lseek_r+0x20>)
 80020b0:	602a      	str	r2, [r5, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	f7ff f9fa 	bl	80014ac <_lseek>
 80020b8:	1c43      	adds	r3, r0, #1
 80020ba:	d102      	bne.n	80020c2 <_lseek_r+0x1e>
 80020bc:	682b      	ldr	r3, [r5, #0]
 80020be:	b103      	cbz	r3, 80020c2 <_lseek_r+0x1e>
 80020c0:	6023      	str	r3, [r4, #0]
 80020c2:	bd38      	pop	{r3, r4, r5, pc}
 80020c4:	2000017c 	.word	0x2000017c

080020c8 <__swhatbuf_r>:
 80020c8:	b570      	push	{r4, r5, r6, lr}
 80020ca:	460e      	mov	r6, r1
 80020cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020d0:	4614      	mov	r4, r2
 80020d2:	2900      	cmp	r1, #0
 80020d4:	461d      	mov	r5, r3
 80020d6:	b096      	sub	sp, #88	; 0x58
 80020d8:	da07      	bge.n	80020ea <__swhatbuf_r+0x22>
 80020da:	2300      	movs	r3, #0
 80020dc:	602b      	str	r3, [r5, #0]
 80020de:	89b3      	ldrh	r3, [r6, #12]
 80020e0:	061a      	lsls	r2, r3, #24
 80020e2:	d410      	bmi.n	8002106 <__swhatbuf_r+0x3e>
 80020e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020e8:	e00e      	b.n	8002108 <__swhatbuf_r+0x40>
 80020ea:	466a      	mov	r2, sp
 80020ec:	f000 f8ba 	bl	8002264 <_fstat_r>
 80020f0:	2800      	cmp	r0, #0
 80020f2:	dbf2      	blt.n	80020da <__swhatbuf_r+0x12>
 80020f4:	9a01      	ldr	r2, [sp, #4]
 80020f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80020fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80020fe:	425a      	negs	r2, r3
 8002100:	415a      	adcs	r2, r3
 8002102:	602a      	str	r2, [r5, #0]
 8002104:	e7ee      	b.n	80020e4 <__swhatbuf_r+0x1c>
 8002106:	2340      	movs	r3, #64	; 0x40
 8002108:	2000      	movs	r0, #0
 800210a:	6023      	str	r3, [r4, #0]
 800210c:	b016      	add	sp, #88	; 0x58
 800210e:	bd70      	pop	{r4, r5, r6, pc}

08002110 <__smakebuf_r>:
 8002110:	898b      	ldrh	r3, [r1, #12]
 8002112:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002114:	079d      	lsls	r5, r3, #30
 8002116:	4606      	mov	r6, r0
 8002118:	460c      	mov	r4, r1
 800211a:	d507      	bpl.n	800212c <__smakebuf_r+0x1c>
 800211c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002120:	6023      	str	r3, [r4, #0]
 8002122:	6123      	str	r3, [r4, #16]
 8002124:	2301      	movs	r3, #1
 8002126:	6163      	str	r3, [r4, #20]
 8002128:	b002      	add	sp, #8
 800212a:	bd70      	pop	{r4, r5, r6, pc}
 800212c:	466a      	mov	r2, sp
 800212e:	ab01      	add	r3, sp, #4
 8002130:	f7ff ffca 	bl	80020c8 <__swhatbuf_r>
 8002134:	9900      	ldr	r1, [sp, #0]
 8002136:	4605      	mov	r5, r0
 8002138:	4630      	mov	r0, r6
 800213a:	f7ff fceb 	bl	8001b14 <_malloc_r>
 800213e:	b948      	cbnz	r0, 8002154 <__smakebuf_r+0x44>
 8002140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002144:	059a      	lsls	r2, r3, #22
 8002146:	d4ef      	bmi.n	8002128 <__smakebuf_r+0x18>
 8002148:	f023 0303 	bic.w	r3, r3, #3
 800214c:	f043 0302 	orr.w	r3, r3, #2
 8002150:	81a3      	strh	r3, [r4, #12]
 8002152:	e7e3      	b.n	800211c <__smakebuf_r+0xc>
 8002154:	4b0d      	ldr	r3, [pc, #52]	; (800218c <__smakebuf_r+0x7c>)
 8002156:	62b3      	str	r3, [r6, #40]	; 0x28
 8002158:	89a3      	ldrh	r3, [r4, #12]
 800215a:	6020      	str	r0, [r4, #0]
 800215c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002160:	81a3      	strh	r3, [r4, #12]
 8002162:	9b00      	ldr	r3, [sp, #0]
 8002164:	6120      	str	r0, [r4, #16]
 8002166:	6163      	str	r3, [r4, #20]
 8002168:	9b01      	ldr	r3, [sp, #4]
 800216a:	b15b      	cbz	r3, 8002184 <__smakebuf_r+0x74>
 800216c:	4630      	mov	r0, r6
 800216e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002172:	f000 f889 	bl	8002288 <_isatty_r>
 8002176:	b128      	cbz	r0, 8002184 <__smakebuf_r+0x74>
 8002178:	89a3      	ldrh	r3, [r4, #12]
 800217a:	f023 0303 	bic.w	r3, r3, #3
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	81a3      	strh	r3, [r4, #12]
 8002184:	89a0      	ldrh	r0, [r4, #12]
 8002186:	4305      	orrs	r5, r0
 8002188:	81a5      	strh	r5, [r4, #12]
 800218a:	e7cd      	b.n	8002128 <__smakebuf_r+0x18>
 800218c:	08001911 	.word	0x08001911

08002190 <__malloc_lock>:
 8002190:	4801      	ldr	r0, [pc, #4]	; (8002198 <__malloc_lock+0x8>)
 8002192:	f7ff bcb4 	b.w	8001afe <__retarget_lock_acquire_recursive>
 8002196:	bf00      	nop
 8002198:	20000174 	.word	0x20000174

0800219c <__malloc_unlock>:
 800219c:	4801      	ldr	r0, [pc, #4]	; (80021a4 <__malloc_unlock+0x8>)
 800219e:	f7ff bcaf 	b.w	8001b00 <__retarget_lock_release_recursive>
 80021a2:	bf00      	nop
 80021a4:	20000174 	.word	0x20000174

080021a8 <_free_r>:
 80021a8:	b538      	push	{r3, r4, r5, lr}
 80021aa:	4605      	mov	r5, r0
 80021ac:	2900      	cmp	r1, #0
 80021ae:	d043      	beq.n	8002238 <_free_r+0x90>
 80021b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021b4:	1f0c      	subs	r4, r1, #4
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	bfb8      	it	lt
 80021ba:	18e4      	addlt	r4, r4, r3
 80021bc:	f7ff ffe8 	bl	8002190 <__malloc_lock>
 80021c0:	4a1e      	ldr	r2, [pc, #120]	; (800223c <_free_r+0x94>)
 80021c2:	6813      	ldr	r3, [r2, #0]
 80021c4:	4610      	mov	r0, r2
 80021c6:	b933      	cbnz	r3, 80021d6 <_free_r+0x2e>
 80021c8:	6063      	str	r3, [r4, #4]
 80021ca:	6014      	str	r4, [r2, #0]
 80021cc:	4628      	mov	r0, r5
 80021ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021d2:	f7ff bfe3 	b.w	800219c <__malloc_unlock>
 80021d6:	42a3      	cmp	r3, r4
 80021d8:	d90a      	bls.n	80021f0 <_free_r+0x48>
 80021da:	6821      	ldr	r1, [r4, #0]
 80021dc:	1862      	adds	r2, r4, r1
 80021de:	4293      	cmp	r3, r2
 80021e0:	bf01      	itttt	eq
 80021e2:	681a      	ldreq	r2, [r3, #0]
 80021e4:	685b      	ldreq	r3, [r3, #4]
 80021e6:	1852      	addeq	r2, r2, r1
 80021e8:	6022      	streq	r2, [r4, #0]
 80021ea:	6063      	str	r3, [r4, #4]
 80021ec:	6004      	str	r4, [r0, #0]
 80021ee:	e7ed      	b.n	80021cc <_free_r+0x24>
 80021f0:	461a      	mov	r2, r3
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	b10b      	cbz	r3, 80021fa <_free_r+0x52>
 80021f6:	42a3      	cmp	r3, r4
 80021f8:	d9fa      	bls.n	80021f0 <_free_r+0x48>
 80021fa:	6811      	ldr	r1, [r2, #0]
 80021fc:	1850      	adds	r0, r2, r1
 80021fe:	42a0      	cmp	r0, r4
 8002200:	d10b      	bne.n	800221a <_free_r+0x72>
 8002202:	6820      	ldr	r0, [r4, #0]
 8002204:	4401      	add	r1, r0
 8002206:	1850      	adds	r0, r2, r1
 8002208:	4283      	cmp	r3, r0
 800220a:	6011      	str	r1, [r2, #0]
 800220c:	d1de      	bne.n	80021cc <_free_r+0x24>
 800220e:	6818      	ldr	r0, [r3, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	4401      	add	r1, r0
 8002214:	6011      	str	r1, [r2, #0]
 8002216:	6053      	str	r3, [r2, #4]
 8002218:	e7d8      	b.n	80021cc <_free_r+0x24>
 800221a:	d902      	bls.n	8002222 <_free_r+0x7a>
 800221c:	230c      	movs	r3, #12
 800221e:	602b      	str	r3, [r5, #0]
 8002220:	e7d4      	b.n	80021cc <_free_r+0x24>
 8002222:	6820      	ldr	r0, [r4, #0]
 8002224:	1821      	adds	r1, r4, r0
 8002226:	428b      	cmp	r3, r1
 8002228:	bf01      	itttt	eq
 800222a:	6819      	ldreq	r1, [r3, #0]
 800222c:	685b      	ldreq	r3, [r3, #4]
 800222e:	1809      	addeq	r1, r1, r0
 8002230:	6021      	streq	r1, [r4, #0]
 8002232:	6063      	str	r3, [r4, #4]
 8002234:	6054      	str	r4, [r2, #4]
 8002236:	e7c9      	b.n	80021cc <_free_r+0x24>
 8002238:	bd38      	pop	{r3, r4, r5, pc}
 800223a:	bf00      	nop
 800223c:	20000144 	.word	0x20000144

08002240 <_read_r>:
 8002240:	b538      	push	{r3, r4, r5, lr}
 8002242:	4604      	mov	r4, r0
 8002244:	4608      	mov	r0, r1
 8002246:	4611      	mov	r1, r2
 8002248:	2200      	movs	r2, #0
 800224a:	4d05      	ldr	r5, [pc, #20]	; (8002260 <_read_r+0x20>)
 800224c:	602a      	str	r2, [r5, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	f7ff f8d6 	bl	8001400 <_read>
 8002254:	1c43      	adds	r3, r0, #1
 8002256:	d102      	bne.n	800225e <_read_r+0x1e>
 8002258:	682b      	ldr	r3, [r5, #0]
 800225a:	b103      	cbz	r3, 800225e <_read_r+0x1e>
 800225c:	6023      	str	r3, [r4, #0]
 800225e:	bd38      	pop	{r3, r4, r5, pc}
 8002260:	2000017c 	.word	0x2000017c

08002264 <_fstat_r>:
 8002264:	b538      	push	{r3, r4, r5, lr}
 8002266:	2300      	movs	r3, #0
 8002268:	4d06      	ldr	r5, [pc, #24]	; (8002284 <_fstat_r+0x20>)
 800226a:	4604      	mov	r4, r0
 800226c:	4608      	mov	r0, r1
 800226e:	4611      	mov	r1, r2
 8002270:	602b      	str	r3, [r5, #0]
 8002272:	f7ff f9a2 	bl	80015ba <_fstat>
 8002276:	1c43      	adds	r3, r0, #1
 8002278:	d102      	bne.n	8002280 <_fstat_r+0x1c>
 800227a:	682b      	ldr	r3, [r5, #0]
 800227c:	b103      	cbz	r3, 8002280 <_fstat_r+0x1c>
 800227e:	6023      	str	r3, [r4, #0]
 8002280:	bd38      	pop	{r3, r4, r5, pc}
 8002282:	bf00      	nop
 8002284:	2000017c 	.word	0x2000017c

08002288 <_isatty_r>:
 8002288:	b538      	push	{r3, r4, r5, lr}
 800228a:	2300      	movs	r3, #0
 800228c:	4d05      	ldr	r5, [pc, #20]	; (80022a4 <_isatty_r+0x1c>)
 800228e:	4604      	mov	r4, r0
 8002290:	4608      	mov	r0, r1
 8002292:	602b      	str	r3, [r5, #0]
 8002294:	f7ff faf6 	bl	8001884 <_isatty>
 8002298:	1c43      	adds	r3, r0, #1
 800229a:	d102      	bne.n	80022a2 <_isatty_r+0x1a>
 800229c:	682b      	ldr	r3, [r5, #0]
 800229e:	b103      	cbz	r3, 80022a2 <_isatty_r+0x1a>
 80022a0:	6023      	str	r3, [r4, #0]
 80022a2:	bd38      	pop	{r3, r4, r5, pc}
 80022a4:	2000017c 	.word	0x2000017c

080022a8 <_init>:
 80022a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022aa:	bf00      	nop
 80022ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ae:	bc08      	pop	{r3}
 80022b0:	469e      	mov	lr, r3
 80022b2:	4770      	bx	lr

080022b4 <_fini>:
 80022b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b6:	bf00      	nop
 80022b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ba:	bc08      	pop	{r3}
 80022bc:	469e      	mov	lr, r3
 80022be:	4770      	bx	lr
